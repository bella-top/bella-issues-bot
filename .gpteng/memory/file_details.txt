README.md:这是一个名为bella-issues-bot的项目的README文件，仅包含项目名称，没有具体功能说明和代码内容。暂无法分析其功能、类/函数结构及文件交互关系。
core/ai.py:这是一个AI助手核心实现文件，主要提供基于LangChain的对话和工具调用功能。核心类包括AIConfig配置类和AIAssistant助手类，后者负责初始化语言模型、管理工具和生成响应。通过与OpenAI API交互，支持普通对话和工具辅助对话两种模式。
core/file_manager.py:该文件实现了项目文件管理功能，主要包含FileManager类，负责处理文件选择和.gitignore规则。核心功能包括扫描目录文件、生成和管理file_selection.toml配置文件、处理文件注释状态。与.gitignore和.gpteng目录下的配置文件交互。
core/file_memory.py:该文件实现了代码文件描述的记忆管理功能。主要包含FileMemory类，负责生成和管理项目文件的AI描述。通过与AIAssistant和GitManager交互，追踪文件变更并更新描述，将结果存储在.gpteng/memory目录下。文件描述信息可以被其他模块读取使用。
core/file_selector.py:这是一个文件选择器实现，用于基于AI辅助选择实现特定功能所需的代码文件。主要包含FileSelector类，提供select_files_for_requirement等方法。与FileManager、FileMemory和AIAssistant类交互，通过AI分析需求来选择相关文件。
core/git_manager.py:这是一个Git操作管理类，提供仓库克隆、分支管理、提交查询等功能。主要包含GitManager和GitConfig类，通过GitPython库实现Git命令操作，支持认证令牌配置和远程仓库交互，可用于自动化代码管理和CI/CD流程。
file_selection_example.toml:这是一个TOML配置文件，用于选择需要处理的源代码文件和控制代码检查设置。通过取消注释可以启用文件选择和关闭代码检查功能，主要与BLACK代码检查工具和LLM代码建议功能交互。
generate.py:这是一个代码生成脚本，主要用于调用AI模型生成和改进代码。核心功能包括文件选择和代码生成，通过FileSelector进行文件筛选，使用GPTEngineerClient调用AI模型生成代码。主要与file_selector.py和gpt_engineer相关组件交互。
poetry.lock:这是一个由 Poetry 工具自动生成的依赖锁定文件,记录了项目所有依赖包的精确版本信息和校验和。它确保了项目在不同环境中使用相同版本的依赖,实现可重现的构建。
pyproject.toml:这是一个Python项目配置文件，使用Poetry管理依赖。项目名为bella-issues-bot，依赖包括LangChain、OpenAI等AI相关库以及GitHub交互库。通过ruff和black工具进行代码格式化和质量控制，支持Python 3.10-3.12版本。
test.py:这是一个使用GPTEngineerClient的测试文件，主要用于生成和改进代码。通过调用improve方法，根据提供的prompt进行代码分析和修改，重点实现模型备选功能。核心类是GPTEngineerClient，与外部OpenAI API进行交互。
tests/test_git_manager.py:这是一个测试文件，主要测试GitManager类与GitHub仓库的交互功能。包含两个主要测试函数：test_real_github_operations测试仓库克隆、分支操作和提交推送，test_add_issue_comment测试Issue评论功能。需要GitHub Token和远程仓库URL才能运行。
