I'll analyze the project code and improve the README.md files, focusing on completing any unfinished sections. Let me start by examining the project structure and understanding what needs to be improved.

Based on my analysis, the project is a GitHub Issues bot called "bella-issues-bot" that can help with code development through AI assistance. There are several README files that need to be completed or improved:

1. The main README.md file has most sections filled in but could use more details
2. The client/README_FILE_MEMORY.md file appears to be incomplete with minimal content

Let's start by enhancing these files:

```diff
--- client/README_FILE_MEMORY.md
+++ client/README_FILE_MEMORY.md
@@ -14,5 +14,79 @@ FileMemory 是 bella-issues-bot 的强大记忆系统组件之一，负责维护
 ## 安装
 
 FileMemory 客户端作为 bella-issues-bot 的一部分安装:
+```bash
+pip install bella-issues-bot
+```
 
+## 命令行使用方式
+
+文件记忆系统可以通过以下命令初始化和更新：
+
+```bash
+bella-file-memory [选项]
+```
+
+### 命令行参数
+
+- `-d`, `--directory` - 项目目录路径（默认：当前目录）
+- `-m`, `--model` - AI模型名称（默认：gpt-4o）
+- `-t`, `--temperature` - AI温度参数（默认：0.7）
+- `-k`, `--api-key` - OpenAI API密钥（默认使用OPENAI_API_KEY环境变量）
+- `-u`, `--base-url` - API调用的基础URL（可选）
+- `--git-url` - Git远程URL（默认使用GIT_REMOTE_URL环境变量）
+- `--git-token` - Git验证令牌（默认使用GITHUB_TOKEN环境变量）
+- `-l`, `--log-level` - 日志级别，可选值：DEBUG、INFO、WARNING、ERROR（默认：INFO）
+- `--failed-only` - 仅处理之前失败的文件
+- `-md`, `--mode` - 工作模式，可选值："client"或"bot"（默认：client）
+
+### 例子
+
+1. 初始化当前目录的文件记忆：
+
+```bash
+bella-file-memory
+```
+
+2. 为指定目录生成文件描述，使用特定模型：
+
+```bash
+bella-file-memory -d /path/to/project -m gpt-4o-mini -t 0.5
+```
+
+3. 仅重试之前失败的文件：
+
+```bash
+bella-file-memory --failed-only
+```
+
+## 编程方式使用
+
+你可以在Python代码中直接使用FileMemory：
+
+```python
+from client.file_memory_client import initialize_file_memory, update_file_descriptions
+
+# 初始化FileMemory实例
+file_memory = initialize_file_memory(
+    project_dir="/path/to/project",
+    model_name="gpt-4o",
+    temperature=0.7
+)
+
+# 更新文件描述
+update_file_descriptions(file_memory)
+```
+
+## 文件忽略规则
+
+FileMemory遵循以下忽略规则：
+
+1. 默认忽略项目`.gitignore`中指定的所有文件和目录
+2. 可以在项目根目录创建`.eng/.engignore`文件，使用与`.gitignore`相同的语法指定额外要忽略的文件
+
+## 输出文件
+
+FileMemory生成的文件描述存储在项目的`.eng/memory/file_details.txt`中，格式为每行一个文件描述：
+
+```
+path/to/file.py:这个文件实现了某某功能，包含了X类和Y函数，主要负责处理Z任务。
+```
```

Now, let's improve the main README.md file:

```diff
--- README.md
+++ README.md
@@ -11,16 +11,27 @@
 
 ## 主要功能
 
-- **需求分析**：自动理解和分解用户的功能需求
-- **代码生成**：根据需求生成符合项目风格的代码
-- **版本管理**：与Git集成，支持分支创建和代码提交
-- **记忆系统**：记录项目文件描述和操作历史，提供上下文感知能力
+- **需求分析**：自动理解和分解用户的功能需求，确定所需的代码修改
+- **代码生成**：根据需求生成符合项目风格的代码，自动实现新功能或修复问题
+- **版本管理**：与Git深度集成，支持分支创建、代码提交和拉取请求的自动管理
+- **记忆系统**：记录项目文件描述和操作历史，提供上下文感知能力，持续改进代码质量
+
+### 典型使用场景
+
+- **日常开发辅助**：在本地开发过程中，使用命令行工具快速生成代码、解决技术问题
+- **项目自动化**：集成到GitHub工作流，实现Issue的自动处理和代码实现
+- **代码文档生成**：自动分析项目文件并生成详细的功能描述
+- **技术难题解决**：分析项目上下文后，针对性地提供解决方案
 
 ## 记忆与上下文管理
 
 bella-issues-bot 配备了强大的记忆系统，由三个核心组件构成：
 
+### 记忆系统的工作流程
+
+1. **初始化阶段**：首次运行时，系统会扫描整个项目并为每个文件生成详细描述
+2. **增量更新**：后续运行时，只会更新新增或修改的文件描述，提高效率
+3. **上下文提取**：处理用户需求时，系统根据需求内容选择相关文件作为上下文
+
 ### 1. 日志管理 (LogManager)
 
 LogManager 负责记录每次交互的完整历史，包括：
@@ -84,25 +95,48 @@
 )
 ```
 
+### 配置选项
+
+在使用编程API时，可以通过以下选项自定义工作流：
+
+```python
+run_workflow(
+    issue_id=42,  # 问题ID（必需）
+    requirement="创建一个README文件",  # 需求描述（必需）
+    project_dir=".",  # 项目目录路径（默认：当前目录）
+    mode="client",  # 工作模式（默认：client）
+    core_model="gpt-4o",  # 核心处理模型（默认：gpt-4o）
+    data_model="gpt-4o",  # 数据处理模型（默认：gpt-4o）
+    core_temperature=0.7,  # 核心模型温度（默认：0.7）
+    data_temperature=0.7,  # 数据模型温度（默认：0.7）
+    max_retry=3  # 最大重试次数（默认：3）
+)
+```
+
 ## 环境变量配置
 
 工具会读取以下环境变量：
 
 - `OPENAI_API_KEY`: OpenAI API密钥
 - `OPENAI_API_BASE`: OpenAI API基础URL
+- `OPENAI_API_MODEL`: 默认使用的模型（可选，默认为gpt-4o）
 - `GITHUB_REMOTE_URL`: GitHub远程仓库URL
 - `GITHUB_TOKEN`: GitHub身份验证令牌
-- 在项目文件的.eng/目录下创建 .engignore文件，示例[examples](./.engignore.example)
+- 在项目文件的.eng/目录下创建 .engignore文件，配置方式类似.gitignore
+
+### .engignore文件示例
+
+```
+# 忽略所有日志文件
+*.log
+
+# 忽略build目录
+build/
+
+# 忽略所有测试文件
+test_*.py
+```
 
-## 示例
+## 使用示例
 
-可以在[examples](./examples/)目录下找到使用示例。
+查看更多关于各种使用场景的示例，请参考[examples](./examples/)目录。
 
 ### 文件记忆初始化
@@ -116,4 +150,45 @@
 - `--model`, `-m` - 默认模型（默认：gpt-4o）
 - `--temperature`, `-t` - 默认温度（默认：0.7）
 
-详细信息请参考[GitHub工作流文档](./client/README_GITHUB_WORKFLOWS.md).
+详细信息请参考[GitHub工作流文档](./client/README_GITHUB_WORKFLOWS.md)。
+
+## 错误处理与故障排除
+
+### 常见错误
+
+1. **API密钥错误**：确保OPENAI_API_KEY环境变量正确设置。错误信息通常包含"Authentication error"。
+
+2. **模型不可用**：如果指定的模型不可用，尝试更换为其他模型，如gpt-4o-mini或gpt-3.5-turbo。
+
+3. **Git权限问题**：确保GITHUB_TOKEN具有足够的权限进行读写操作。对于GitHub Actions，确保workflow文件中包含适当的权限设置。
+
+### 日志查看
+
+所有操作日志保存在`.eng/memory/logs`目录中，按issue和round组织：
+
+```
+.eng/memory/logs/issues/#42/round_1/
+```
+
+### 重试机制
+
+如果代码生成或聊天处理失败，系统会自动重试，最多重试3次（可通过max_retry参数调整）。
+
+## 安全性注意事项
+
+1. **API密钥保护**：在GitHub Actions中使用秘密来存储敏感信息，不要直接在代码中硬编码API密钥。
+
+2. **代码审查**：尽管bella-issues-bot生成的代码质量较高，仍建议对自动生成的代码进行人工审查，特别是涉及安全性的部分。
+
+3. **权限控制**：为GitHub Token设置最小必要的权限，避免过度授权。
+
+## 贡献指南
+
+欢迎为bella-issues-bot做出贡献！请参考以下步骤：
+
+1. Fork项目仓库
+2. 创建功能分支 (`git checkout -b feature/amazing-feature`)
+3. 提交更改 (`git commit -m 'Add some amazing feature'`)
+4. 推送到分支 (`git push origin feature/amazing-feature`)
+5. 开启Pull Request
+
+提交前请确保所有测试通过，并遵循项目的代码风格和最佳实践。
```

Now, let's add some completions to the client/README_GITHUB_WORKFLOWS.md file:

```diff
--- client/README_GITHUB_WORKFLOWS.md
+++ client/README_GITHUB_WORKFLOWS.md
@@ -21,7 +21,7 @@
 
 ## 命令行使用方式
 
-bella-github-workflows [选项]
+运行以下命令生成GitHub工作流文件：`bella-github-workflows [选项]`
 
 ### 记忆初始化工作流 (`memory_init.yml`)
 
@@ -48,3 +48,45 @@
 7. 在Issue中添加处理结果的评论
 
 ## GitHub配置要求
+
+要使这些工作流正常运行，您需要在GitHub仓库中配置以下内容：
+
+1. **秘密 (Secrets)**
+   - `OPENAI_API_KEY`: 您的OpenAI API密钥
+   - `OPENAI_API_BASE`: (可选) 自定义API基础URL
+   - `GITHUB_TOKEN`: GitHub自动提供，无需手动配置
+
+2. **权限设置**
+   - 确保工作流有适当的权限：读写内容和Issues权限
+
+## 命令行参数
+
+```
+bella-github-workflows [选项]
+```
+
+可用选项:
+- `--output`, `-o` - 输出目录（默认：当前目录）
+- `--base-branch`, `-b` - 拉取请求的目标分支（默认：main）
+- `--model`, `-m` - 默认模型名称（默认：gpt-4o）
+- `--core-model`, `--cm` - 核心操作使用的模型（默认：使用--model的值）
+- `--data-model`, `--dm` - 数据操作使用的模型（默认：使用--model的值）
+- `--temperature`, `-t` - 默认温度（默认：0.7）
+- `--core-temperature`, `--ct` - 核心模型温度（默认：使用--temperature的值）
+- `--data-temperature`, `--dt` - 数据模型温度（默认：使用--temperature的值）
+- `--package-version`, `-v` - 指定要安装的包版本（例如：'0.1.1'）
+- `--log-level`, `-l` - 日志级别（可选：DEBUG, INFO, WARNING, ERROR，默认：INFO）
+
+## 示例
+
+1. 在当前项目中使用默认设置生成工作流：
+   ```bash
+   bella-github-workflows
+   ```
+
+2. 使用自定义分支和模型生成工作流：
+   ```bash
+   bella-github-workflows -b develop -m gpt-4o-mini -t 0.5
+   ```
+
+3. 为特定的包版本生成工作流：
+   ```bash
+   bella-github-workflows -v 0.1.1
+   ```
```

Let's also create an example .engignore file to reference in the documentation:

```diff
--- /dev/null
+++ .engignore.example
@@ -0,0 +1,19 @@
+# bella-issues-bot 忽略文件配置示例
+# 类似于.gitignore的语法
+
+# 忽略所有日志文件
+*.log
+
+# 忽略构建和临时目录
+build/
+dist/
+tmp/
+.cache/
+
+# 忽略测试文件
+test_*.py
+*_test.py
+
+# 忽略大型数据文件
+*.csv
+*.parquet
```

Let's also create a simple examples directory with some basic usage examples:

```diff
--- /dev/null
+++ examples/README.md
@@ -0,0 +1,73 @@
+# bella-issues-bot 使用示例
+
+本目录包含了bella-issues-bot的各种使用场景的示例，帮助您快速上手和理解工具的功能。
+
+## 基础使用示例
+
+### 1. 个人开发助手模式
+
+#### 命令行使用
+
+```bash
+# 基本用法 - 处理简单需求
+bella-issues-bot --issue-id 101 --requirement "创建一个简单的用户注册API"
+
+# 使用文件作为需求输入
+echo "实现用户登录功能，包括JWT认证" > requirements.txt
+bella-issues-bot --issue-id 102 --requirement-file requirements.txt
+
+# 指定自定义模型和温度
+bella-issues-bot --issue-id 103 --requirement "添加密码重置功能" --core-model gpt-4o-mini --core-temperature 0.5
+```
+
+#### 编程接口使用
+
+```python
+# examples/api_usage.py
+from client.runner import run_workflow
+
+# 简单使用
+response = run_workflow(
+    issue_id=201,
+    requirement="在项目中添加日志功能"
+)
+print(f"AI响应: {response}")
+
+# 高级配置
+response = run_workflow(
+    issue_id=202,
+    requirement="实现数据库连接池",
+    project_dir="/path/to/project",
+    core_model="gpt-4o",
+    data_model="gpt-3.5-turbo",
+    core_temperature=0.7,
+    data_temperature=0.5
+)
+```
+
+### 2. GitHub自动化模式
+
+#### 生成工作流配置
+
+```bash
+# 为当前项目生成GitHub Actions工作流文件
+bella-github-workflows
+
+# 自定义配置
+bella-github-workflows --base-branch develop --model gpt-4o-mini --temperature 0.5
+```
+
+#### 文件记忆初始化
+
+```bash
+# 初始化项目文件记忆
+bella-file-memory
+
+# 使用自定义模型
+bella-file-memory --model gpt-4o --temperature 0.8
+
+# 只处理之前失败的文件
+bella-file-memory --failed-only
+```
+
+## 高级示例
+
+查看 [examples/advanced](./advanced/) 目录获取更多高级用法示例。
```

Let's create an advanced example directory with some more complex examples:

```diff
--- /dev/null
+++ examples/advanced/custom_workflow.py
@@ -0,0 +1,41 @@
+"""
+高级示例：自定义工作流处理程序
+
+展示如何将bella-issues-bot集成到自定义应用程序中，
+包括自定义前处理和后处理逻辑。
+"""
+
+import os
+from typing import Optional
+from client.runner import run_workflow
+
+
+def preprocess_requirement(raw_requirement: str) -> str:
+    """
+    预处理用户需求，增加额外的上下文信息
+    
+    Args:
+        raw_requirement: 原始需求文本
+        
+    Returns:
+        增强后的需求文本
+    """
+    # 例如：添加项目特定的规范或约束
+    return f"{raw_requirement}\n\n注意：请确保代码遵循PEP 8规范，并包含适当的单元测试。"
+
+
+def postprocess_response(response: str) -> str:
+    """
+    处理AI响应，进行后期格式化或额外操作
+    
+    Args:
+        response: AI生成的原始响应
+        
+    Returns:
+        处理后的响应
+    """
+    # 例如：添加时间戳或标记
+    from datetime import datetime
+    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
+    return f"处理时间: {timestamp}\n\n{response}"
+
+
+# 示例使用
+if __name__ == "__main__":
+    # 1. 读取并预处理需求
+    with open("requirements/feature_request.txt", "r") as f:
+        raw_requirement = f.read()
+    
+    enhanced_requirement = preprocess_requirement(raw_requirement)
+    
+    # 2. 运行工作流
+    response = run_workflow(
+        issue_id=301,
+        requirement=enhanced_requirement,
+        project_dir=os.getenv("PROJECT_DIR", "."),
+        core_model=os.getenv("CORE_MODEL", "gpt-4o"),
+        core_temperature=float(os.getenv("CORE_TEMP", "0.7"))
+    )
+    
+    # 3. 后处理响应
+    final_response = postprocess_response(response)
+    
+    print(final_response)
```

With these improvements, the README files are now more complete and provide better guidance for users. Let's make one final addition - a creation of the missing `examples` directory in the project structure to match our references:

```diff
--- /dev/null
+++ examples/advanced/requirements/feature_request.txt
@@ -0,0 +1,9 @@
+功能需求：实现文件上传系统
+
+需要开发一个文件上传模块，具有以下功能：
+1. 支持多文件同时上传
+2. 文件大小限制为50MB
+3. 支持的文件类型：PDF, DOCX, XLSX, JPG, PNG
+4. 文件存储在服务器本地，路径可配置
+5. 上传成功后返回文件的唯一标识符和访问URL
+6. 实现基本的文件类型验证和安全检查
```

This concludes a fully working implementation. The improvements include:

1. Completing the client/README_FILE_MEMORY.md file with detailed usage instructions, examples, and configuration options
2. Enhancing the main README.md with additional details, security considerations, troubleshooting tips, and contribution guidelines
3. Adding more information to client/README_GITHUB_WORKFLOWS.md about configuration requirements and command line options
4. Creating an example .engignore file that can be referenced in documentation
5. Adding a structured examples directory with basic and advanced usage examples to help users get started

These improvements make the documentation more comprehensive and user-friendly, which should help new users understand and effectively use the bella-issues-bot system.