[
  {
    "file_name": "client/github_workflow_generator.py",
    "content": "diff\n--- /dev/null\n+++ client/github_workflow_generator.py\n@@ -0,0 +1,242 @@\n+\"\"\"\n+GitHub Workflow Generator\n+\n+A module for generating GitHub Actions workflow files to integrate bella-issues-bot with GitHub.\n+Creates two workflows:\n+1. File Memory Initialization - Triggered on push to a configurable branch\n+2. Issue Processing Bot - Triggered when issues are created or commented on\n+\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from pathlib import Path\n+from typing import Dict, Optional\n+\n+from core.log_config import get_logger, setup_logging\n+\n+logger = get_logger(__name__)\n+\n+# Template for memory initialization workflow\n+MEMORY_INIT_TEMPLATE = \"\"\"name: Initialize File Memory\n+\n+on:\n+  push:\n+    branches:\n+      - {branch}\n+\n+jobs:\n+  init-memory:\n+    runs-on: ubuntu-latest\n+    permissions:\n+      contents: write\n+    steps:\n+      - name: Checkout code\n+        uses: actions/checkout@v3\n+        with:\n+          fetch-depth: 0\n+\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: '3.10'\n+\n+      - name: Install bella-issues-bot\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install bella-issues-bot{package_version}\n+\n+      - name: Initialize file memory\n+        env:\n+          OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n+          OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n+          GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n+          GITHUB_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n+        run: |\n+          bella-file-memory -d . -m {model} -t {temperature}\n+\n+      - name: Commit memory files if changed\n+        run: |\n+          git config --local user.email \"action@github.com\"\n+          git config --local user.name \"GitHub Action\"\n+          git add .eng/memory/\n+          git diff --staged --quiet || git commit -m \"Update file memory\"\n+          git push\n+\"\"\"\n+\n+# Template for issue processing workflow\n+ISSUE_PROCESS_TEMPLATE = \"\"\"name: Process Issues with bella-issues-bot\n+\n+on:\n+  issues:\n+    types: [opened]\n+  issue_comment:\n+    types: [created]\n+\n+jobs:\n+  process-issue:\n+    runs-on: ubuntu-latest\n+    permissions:\n+      contents: write\n+      issues: write\n+    if: ${{{{ !startsWith(github.event.comment.body, 'bella-issues-bot已处理：') }}}}\n+    steps:\n+      - name: Checkout code\n+        uses: actions/checkout@v3\n+        with:\n+          fetch-depth: 0\n+\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: '3.10'\n+\n+      - name: Install bella-issues-bot\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install bella-issues-bot{package_version}\n+\n+      - name: Extract issue info\n+        id: issue\n+        run: |\n+          if [[ \"${{{{ github.event_name }}}}\" == \"issues\" ]]; then\n+            echo \"issue_id=${{{{ github.event.issue.number }}}}\" >> $GITHUB_OUTPUT\n+            echo \"requirement<<EOF\" >> $GITHUB_OUTPUT\n+            echo \"${{{{ github.event.issue.body }}}}\" >> $GITHUB_OUTPUT\n+            echo \"EOF\" >> $GITHUB_OUTPUT\n+          else\n+            echo \"issue_id=${{{{ github.event.issue.number }}}}\" >> $GITHUB_OUTPUT\n+            echo \"requirement<<EOF\" >> $GITHUB_OUTPUT\n+            echo \"${{{{ github.event.comment.body }}}}\" >> $GITHUB_OUTPUT\n+            echo \"EOF\" >> $GITHUB_OUTPUT\n+          fi\n+\n+      - name: Process issue with bella-issues-bot\n+        env:\n+          OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n+          OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n+          GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n+          GITHUB_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n+        run: |\n+          # Create a new branch for this issue\n+          git checkout -b bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}}\n+\n+          # Run bella-issues-bot in bot mode\n+          bella-issues-bot --mode bot --issue-id ${{{{ steps.issue.outputs.issue_id }}}} --core-model {core_model} --data-model {data_model} --core-temperature {core_temperature} --data-temperature {data_temperature} --requirement \"${{{{ steps.issue.outputs.requirement }}}}\"\n+\n+          # Push changes to the new branch\n+          git push -u origin bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}}\n+          \n+          # Create a pull request\n+          PR_URL=$(gh pr create --title \"Fix for issue #${{{{ steps.issue.outputs.issue_id }}}}\" --body \"Automated PR by bella-issues-bot to address issue #${{{{ steps.issue.outputs.issue_id }}}}\" --base {base_branch})\n+          echo \"Created PR: $PR_URL\"\n+        env:\n+          GH_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n+\"\"\"\n+\n+def generate_workflow_files(\n+    output_dir: str,\n+    memory_branch: str = \"main\",\n+    base_branch: str = \"main\",\n+    model: str = \"gpt-4o\",\n+    core_model: Optional[str] = None,\n+    data_model: Optional[str] = None,\n+    temperature: float = 0.7,\n+    core_temperature: Optional[float] = None,\n+    data_temperature: Optional[float] = None,\n+    package_version: str = \"\"\n+) -> Dict[str, str]:\n+    \"\"\"\n+    Generate GitHub workflow YAML files.\n+    \n+    Args:\n+        output_dir: Directory to write workflow files\n+        memory_branch: Branch that triggers memory initialization\n+        base_branch: Base branch for pull requests\n+        model: Default model to use for all operations\n+        core_model: Model for core operations (if different from model)\n+        data_model: Model for data operations (if different from model)\n+        temperature: Default temperature setting for all models\n+        core_temperature: Temperature for core model (if different)\n+        data_temperature: Temperature for data model (if different)\n+        package_version: Specific version of package to install (e.g. \"==0.1.1\")\n+        \n+    Returns:\n+        Dictionary mapping file paths to their contents\n+    \"\"\"\n+    workflows_dir = os.path.join(output_dir, \".github\", \"workflows\")\n+    os.makedirs(workflows_dir, exist_ok=True)\n+    \n+    # Format version specification if provided\n+    if package_version and not package_version.startswith(\"==\"):\n+        package_version = f\"=={package_version}\"\n+    \n+    # Use provided models or default to the general model\n+    actual_core_model = core_model or model\n+    actual_data_model = data_model or model\n+    \n+    # Use provided temperatures or default to the general temperature\n+    actual_core_temp = core_temperature if core_temperature is not None else temperature\n+    actual_data_temp = data_temperature if data_temperature is not None else temperature\n+    \n+    # Generate memory initialization workflow\n+    memory_workflow_path = os.path.join(workflows_dir, \"memory_init.yml\")\n+    memory_workflow_content = MEMORY_INIT_TEMPLATE.format(\n+        branch=memory_branch,\n+        model=model,\n+        temperature=temperature,\n+        package_version=package_version\n+    )\n+    \n+    # Generate issue processing workflow\n+    issue_workflow_path = os.path.join(workflows_dir, \"issue_process.yml\")\n+    issue_workflow_content = ISSUE_PROCESS_TEMPLATE.format(\n+        core_model=actual_core_model,\n+        data_model=actual_data_model,\n+        core_temperature=actual_core_temp,\n+        data_temperature=actual_data_temp,\n+        base_branch=base_branch,\n+        package_version=package_version\n+    )\n+    \n+    # Write the files\n+    with open(memory_workflow_path, 'w') as f:\n+        f.write(memory_workflow_content)\n+    \n+    with open(issue_workflow_path, 'w') as f:\n+        f.write(issue_workflow_content)\n+    \n+    logger.info(f\"Generated workflow files in {workflows_dir}\")\n+    \n+    return {\n+        memory_workflow_path: memory_workflow_content,\n+        issue_workflow_path: issue_workflow_content\n+    }\n+\n+def main() -> None:\n+    \"\"\"Command line interface for GitHub workflow generator.\"\"\"\n+    parser = argparse.ArgumentParser(description=\"Generate GitHub Actions workflows for bella-issues-bot integration\")\n+    parser.add_argument(\"--output\", \"-o\", type=str, default=\".\", help=\"Output directory (default: current directory)\")\n+    parser.add_argument(\"--memory-branch\", \"-mb\", type=str, default=\"main\", help=\"Branch that triggers memory initialization (default: main)\")\n+    parser.add_argument(\"--base-branch\", \"-bb\", type=str, default=\"main\", help=\"Base branch for pull requests (default: main)\")\n+    parser.add_argument(\"--model\", \"-m\", type=str, default=\"gpt-4o\", help=\"Default model for all operations (default: gpt-4o)\")\n+    parser.add_argument(\"--core-model\", \"--cm\", type=str, help=\"Model for core operations (defaults to --model)\")\n+    parser.add_argument(\"--data-model\", \"--dm\", type=str, help=\"Model for data operations (defaults to --model)\")\n+    parser.add_argument(\"--temperature\", \"-t\", type=float, default=0.7, help=\"Default temperature for all models (default: 0.7)\")\n+    parser.add_argument(\"--core-temperature\", \"--ct\", type=float, help=\"Temperature for core model (defaults to --temperature)\")\n+    parser.add_argument(\"--data-temperature\", \"--dt\", type=float, help=\"Temperature for data model (defaults to --temperature)\")\n+    parser.add_argument(\"--package-version\", \"-v\", type=str, default=\"\", help=\"Specific package version to install (e.g. '0.1.1')\")\n+    parser.add_argument(\"--log-level\", \"-l\", type=str, choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"], default=\"INFO\", help=\"Logging level\")\n+    \n+    args = parser.parse_args()\n+    \n+    # Setup logging\n+    import logging\n+    setup_logging(log_level=getattr(logging, args.log_level))\n+    \n+    # Generate workflow files\n+    try:\n+        generate_workflow_files(\n+            output_dir=args.output,\n+            memory_branch=args.memory_branch,\n+            base_branch=args.base_branch,\n+            model=args.model,\n+            core_model=args.core_model,\n+            data_model=args.data_model,\n+            temperature=args.temperature,\n+            core_temperature=args.core_temperature,\n+            data_temperature=args.data_temperature,\n+            package_version=args.package_version\n+        )\n+        logger.info(\"Successfully generated GitHub workflow files\")\n+    except Exception as e:\n+        logger.error(f\"Error generating workflow files: {str(e)}\")\n+        sys.exit(1)\n+\n+if __name__ == \"__main__\":\n+    main()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "scripts/generate_workflows.sh",
    "content": "diff\n--- /dev/null\n+++ scripts/generate_workflows.sh\n@@ -0,0 +1,29 @@\n+#!/bin/bash\n+\n+# Script to generate GitHub workflow files for bella-issues-bot integration\n+# This script provides a simple interface to the workflow generator\n+\n+show_help() {\n+    echo \"Usage: $0 [options]\"\n+    echo \"\"\n+    echo \"Options:\"\n+    echo \"  -o, --output DIR        Output directory (default: current directory)\"\n+    echo \"  -mb, --memory-branch    Branch that triggers memory initialization (default: main)\"\n+    echo \"  -bb, --base-branch      Base branch for pull requests (default: main)\"\n+    echo \"  -m, --model MODEL       Default model for all operations (default: gpt-4o)\"\n+    echo \"  -t, --temp VALUE        Default temperature setting (default: 0.7)\"\n+    echo \"  -v, --version VERSION   Specific package version to install (e.g. '0.1.1')\"\n+    echo \"  -h, --help              Show this help message\"\n+    echo \"\"\n+    echo \"Additional options like --core-model, --data-model, etc. are also supported.\"\n+    echo \"Run 'bella-github-workflows --help' for complete details.\"\n+    echo \"\"\n+}\n+\n+if [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n+    show_help\n+    exit 0\n+fi\n+\n+# Pass all arguments to the Python module\n+python -m client.github_workflow_generator \"$@\"\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "pyproject.toml",
    "content": "diff\n--- pyproject.toml\n+++ pyproject.toml\n@@ -47,6 +47,7 @@ pyyaml = \">=6.0\"\n \n [tool.poetry.scripts]\n bella-issues-bot = 'client.terminal:run_workflow_from_terminal'\n bella-file-memory = 'client.file_memory_client:main'\n+bella-github-workflows = 'client.github_workflow_generator:main'\n \n [tool.ruff]\n\n",
    "file_content": "[tool.poetry]\nname = \"bella-issues-bot\"\nversion = \"0.1.1\"\ndescription = \"bella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：个人开发助手模式：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。GitHub自动化模式：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。\"\nauthors = [\"saizhuolin\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/szl97/bella-issues-bot\"\nrepository = \"https://github.com/szl97/bella-issues-bot\"\ndocumentation = \"https://github.com/szl97/bella-issues-bot\"\npackages = [\n    {include = \"core\"},\n    {include = \"client\"}\n]\ninclude = [\n    \"system.txt\"\n]\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry.dependencies]\npython = \">=3.10,<3.13\"\ngitpython = \"^3.1.40\"\nPyGithub = \"^2.1.1\"\nlangchain = \">=0.3.0,<0.4.0\"\nlangchain-openai = \">=0.1.0\"\nlangchain-core = \">=0.3.0,<0.4.0\"\nlangchain-community = \">=0.3.0,<0.4.0\"\npython-dotenv = \"^1.0.0\"\npydantic = \"^2.5.0\"\nopenai = \"^1.3.5\"\npytest = \"^7.4.0\"\npathspec = \">=0.9.0\"\ntoml = \">=0.10.2\"\ntyping-extensions = \">=4.0.0\"\njinja2 = \">=3.1.0,<4.0.0\"\ncolorlog = \">=6.8.0,<7.0.0\"\ncolorama = \">=0.4.4\"\nargparse = \">=1.4.0\"\npyyaml = \">=6.0\"\n\n[tool.poetry.scripts]\nbella-issues-bot = 'client.terminal:run_workflow_from_terminal'\nbella-file-memory = 'client.file_memory_client:main'\n\n[tool.ruff]\nselect = [\"F\", \"E\", \"W\", \"I001\"]\nshow-fixes = false\ntarget-version = \"py310\"\ntask-tags = [\"TODO\", \"FIXME\"]\nextend-ignore = [\"E501\", \"E722\"]\n\n[tool.black]\ntarget-version = [\"py310\"]\n\n[tool.ruff.isort]\nknown-first-party = []\nknown-third-party = []\nsection-order = [\n  \"future\",\n  \"standard-library\",\n  \"third-party\",\n  \"first-party\",\n  \"local-folder\",\n]\ncombine-as-imports = true\nsplit-on-trailing-comma = false\nlines-between-types = 1\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "client/__init__.py",
    "content": "diff\n--- client/__init__.py\n+++ client/__init__.py\n@@ -2,3 +2,4 @@\n \n # Export file memory functions for programmatic use\n from client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n+from client.github_workflow_generator import generate_workflow_files\n\n",
    "file_content": "\"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n\n# Export file memory functions for programmatic use\nfrom client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "README.md",
    "content": "Diff #1:\ndiff\n--- README.md\n+++ README.md\n@@ -98,8 +98,23 @@ for data_model in data_model if data_model is None\n ## 示例\n \n 可以在[examples](./examples/)目录下找到使用示例。\n \n ### 文件记忆初始化\n \n 在项目根目录执行 `bella-file-memory` 可以初始化文件记忆系统，它会自动分析项目中的文件并生成描述信息。\n 更多详细信息请参阅[文件记忆客户端文档](./client/README_FILE_MEMORY.md)。\n+\n+### GitHub工作流集成\n+\n+bella-issues-bot 提供了一个工具，可以自动为您的项目生成 GitHub Actions 工作流配置：\n+\n+\n\n\nDiff #2:\ndiff\n--- README.md\n+++ README.md\n@@ -118,3 +118,5 @@ bella-github-workflows [选项]\n - `--base-branch`, `-bb` - 拉取请求的目标分支（默认：main）\n - `--model`, `-m` - 默认模型（默认：gpt-4o）\n - `--temperature`, `-t` - 默认温度（默认：0.7）\n+\n+详细信息请参考[GitHub工作流文档](./client/README_GITHUB_WORKFLOWS.md).\n\n",
    "file_content": "# bella-issues-bot\n\n## 项目简介\n\nbella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：\n\n1. **个人开发助手模式**：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。\n2. **GitHub自动化模式**：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。\n\n通过对项目结构的深入理解和强大的代码生成能力，bella-issues-bot 能够显著提高开发效率，减少重复工作，让您专注于更有创造性的任务。\n\n## 主要功能\n\n- **需求分析**：自动理解和分解用户的功能需求\n- **代码生成**：根据需求生成符合项目风格的代码\n- **版本管理**：与Git集成，支持分支创建和代码提交\n- **记忆系统**：记录项目文件描述和操作历史，提供上下文感知能力\n\n## 记忆与上下文管理\n\nbella-issues-bot 配备了强大的记忆系统，由三个核心组件构成：\n\n### 1. 日志管理 (LogManager)\n\nLogManager 负责记录每次交互的完整历史，包括：\n- 系统提示词和用户需求\n- AI响应内容\n- 文件修改记录和差异对比\n\n这些日志按issue和轮次组织，支持历史追溯和问题诊断。每轮交互都会生成详细日志，便于追踪AI的决策过程和代码修改历史。\n\n### 2. 版本管理 (VersionManager)\n\nVersionManager 提供智能的版本控制功能：\n- 自动提取历史轮次的需求和响应\n- 生成格式化的历史执行记录作为上下文\n- 分析当前需求与历史需求的关系\n- 根据需要执行版本回退操作\n\n系统会分析新需求与先前修改的关系，判断是否需要回滚，确保代码修改的连贯性和一致性。\n\n### 3. 文件记忆 (FileMemory)\n\nFileMemory 模块为项目的每个文件维护详细描述：\n- 自动生成文件功能、结构和关系描述\n- 跟踪文件变更，更新受影响文件的描述\n- 提供上下文相关的文件选择\n- 支持配置忽略文件，默认包含项目的.gitignore，支持自定义添加.eng/.engignore\n\n这使得AI助手能够理解整个代码库的结构和功能，在修改代码时考虑到更广泛的项目上下文。\n\n## 安装方法\n\n使用pip安装：\n\n```bash\npip install bella-issues-bot\n```\n\n## 使用方法\n\nbella-issues-bot 提供了多种使用方式：\n\n### 个人开发模式\n\n在日常开发中，您可以通过命令行界面或编程API使用bella-issues-bot：\n\n#### 命令行使用\n\n```bash\nbella-issues-bot --issue-id <问题ID> --requirement \"你的需求描述\"\n```\n\n更多高级选项和详细使用说明，请参考[客户端文档](./client/README.md)。\n\n#### 编程API使用\n\n```python\nfrom client.runner import run_workflow\n\nrun_workflow(\n    issue_id=42,\n    requirement=\"创建一个简单的README文件\",\n    core_temperature=0.7\n)\n```\n\n## 环境变量配置\n\n工具会读取以下环境变量：\n\n- `OPENAI_API_KEY`: OpenAI API密钥\n- `OPENAI_API_BASE`: OpenAI API基础URL\n- `GITHUB_REMOTE_URL`: GitHub远程仓库URL\n- `GITHUB_TOKEN`: GitHub身份验证令牌\n- 在项目文件的.eng/目录下创建 .engignore文件，示例[examples](./.engignore.example)\n\n## 示例\n\n可以在[examples](./examples/)目录下找到使用示例。\n\n### 文件记忆初始化\n\n在项目根目录执行 `bella-file-memory` 可以初始化文件记忆系统，它会自动分析项目中的文件并生成描述信息。\n更多详细信息请参阅[文件记忆客户端文档](./client/README_FILE_MEMORY.md)。\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "client/README_GITHUB_WORKFLOWS.md",
    "content": "diff\n--- /dev/null\n+++ client/README_GITHUB_WORKFLOWS.md\n@@ -0,0 +1,85 @@\n+# GitHub工作流生成器\n+\n+bella-issues-bot 提供了自动生成 GitHub Actions 工作流配置的功能，可以轻松将 AI 助手集成到您的 GitHub 项目中。\n+\n+## 功能概述\n+\n+工作流生成器会创建两个GitHub Actions工作流文件：\n+\n+1. **记忆初始化工作流** (`memory_init.yml`)\n+   - 当指定分支有推送时触发\n+   - 自动分析项目文件并生成文件描述\n+   - 将记忆文件提交回仓库\n+\n+2. **Issue处理工作流** (`issue_process.yml`)\n+   - 在创建新Issue或添加评论时触发\n+   - 自动提取Issue或评论中的需求\n+   - 在专用分支上处理需求并实现代码\n+   - 创建拉取请求，提供解决方案\n+   - 在Issue中添加处理结果的评论\n+\n+## 命令行使用方式\n+\n+\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  }
]