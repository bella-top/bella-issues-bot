[
  {
    "file_name": "client/github_workflow_generator.py",
    "content": "diff\n--- /dev/null\n+++ client/github_workflow_generator.py\n@@ -0,0 +1,228 @@\n+\"\"\"\n+GitHub Workflow Generator\n+\n+A client tool for generating GitHub Actions workflow files for bella-issues-bot integration.\n+This module provides functionality to create workflows for:\n+1. File memory initialization on branch push\n+2. WorkflowEngine execution on issues and comments\n+\"\"\"\n+\n+import os\n+import argparse\n+from pathlib import Path\n+import yaml\n+from typing import Dict, Any, Optional, List, Tuple\n+from dotenv import load_dotenv\n+\n+# Templates for GitHub Actions workflow files\n+FILE_MEMORY_TEMPLATE = '''name: File Memory Initialization\n+\n+on:\n+  push:\n+    branches:\n+      - {target_branch}\n+\n+jobs:\n+  init-file-memory:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout code\n+        uses: actions/checkout@v3\n+        with:\n+          fetch-depth: 0\n+\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: '3.10'\n+\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install bella-issues-bot{version_constraint}\n+\n+      - name: Initialize File Memory\n+        env:\n+          OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n+          OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n+          GIT_REMOTE_URL: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n+          GITHUB_TOKEN: ${{{{ secrets.BELLA_GITHUB_TOKEN }}}}\n+        run: |\n+          bella-file-memory -d {project_dir} -m {model} -t {temperature} {additional_params}\n+'''\n+\n+WORKFLOW_ENGINE_TEMPLATE = '''name: Bella Issues Bot\n+\n+on:\n+  issues:\n+    types: [opened, reopened]\n+  issue_comment:\n+    types: [created]\n+\n+jobs:\n+  process-issue:\n+    runs-on: ubuntu-latest\n+    if: ${{{{ github.event_name == 'issues' || (github.event_name == 'issue_comment' && !startsWith(github.event.comment.body, 'bella-issues-bot已处理：')) }}}}\n+    steps:\n+      - name: Checkout code\n+        uses: actions/checkout@v3\n+        with:\n+          fetch-depth: 0\n+\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: '3.10'\n+\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install bella-issues-bot{version_constraint}\n+\n+      - name: Get Issue Information\n+        id: get-issue\n+        run: |\n+          if [ \"${{{{ github.event_name }}}}\" = \"issues\" ]; then\n+            echo \"issue_id=${{{{ github.event.issue.number }}}}\" >> $GITHUB_OUTPUT\n+            echo \"requirement<<EOF\" >> $GITHUB_OUTPUT\n+            echo \"${{{{ github.event.issue.body }}}}\" >> $GITHUB_OUTPUT\n+            echo \"EOF\" >> $GITHUB_OUTPUT\n+          else\n+            echo \"issue_id=${{{{ github.event.issue.number }}}}\" >> $GITHUB_OUTPUT\n+            echo \"requirement<<EOF\" >> $GITHUB_OUTPUT\n+            echo \"${{{{ github.event.comment.body }}}}\" >> $GITHUB_OUTPUT\n+            echo \"EOF\" >> $GITHUB_OUTPUT\n+          fi\n+\n+      - name: Run Bella Issues Bot\n+        env:\n+          OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n+          OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n+          GIT_REMOTE_URL: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n+          GITHUB_TOKEN: ${{{{ secrets.BELLA_GITHUB_TOKEN }}}}\n+        run: |\n+          bella-issues-bot --mode bot --project-dir {project_dir} --issue-id ${{{{ steps.get-issue.outputs.issue_id }}}} --core-model {core_model} --data-model {data_model} --core-temperature {core_temperature} --data-temperature {data_temperature} --requirement \"${{{{ steps.get-issue.outputs.requirement }}}}\" {additional_params}\n+'''\n+\n+\n+def generate_file_memory_workflow(\n+        target_branch: str = \"main\",\n+        project_dir: str = \".\",\n+        model: str = \"gpt-4o\",\n+        temperature: float = 0.7,\n+        version_constraint: str = \"\",\n+        additional_params: str = \"\",\n+) -> str:\n+    \"\"\"\n+    Generate a GitHub Actions workflow for file memory initialization.\n+    \n+    Args:\n+        target_branch: Branch that triggers the workflow\n+        project_dir: Project directory path\n+        model: AI model to use\n+        temperature: AI temperature setting\n+        version_constraint: Version constraint for bella-issues-bot\n+        additional_params: Additional parameters for bella-file-memory\n+        \n+    Returns:\n+        Generated workflow YAML content\n+    \"\"\"\n+    version_spec = f\"=={version_constraint}\" if version_constraint else \"\"\n+    return FILE_MEMORY_TEMPLATE.format(\n+        target_branch=target_branch,\n+        project_dir=project_dir,\n+        model=model,\n+        temperature=temperature,\n+        version_constraint=version_spec,\n+        additional_params=additional_params\n+    )\n+\n+\n+def generate_workflow_engine_workflow(\n+        project_dir: str = \".\",\n+        core_model: str = \"gpt-4o\",\n+        data_model: str = \"gpt-4o\",\n+        core_temperature: float = 0.7,\n+        data_temperature: float = 0.7,\n+        version_constraint: str = \"\",\n+        additional_params: str = \"\",\n+) -> str:\n+    \"\"\"\n+    Generate a GitHub Actions workflow for the WorkflowEngine to process issues.\n+    \n+    Args:\n+        project_dir: Project directory path\n+        core_model: Core AI model to use\n+        data_model: Data AI model to use\n+        core_temperature: Core AI temperature setting\n+        data_temperature: Data AI temperature setting\n+        version_constraint: Version constraint for bella-issues-bot\n+        additional_params: Additional parameters for bella-issues-bot\n+        \n+    Returns:\n+        Generated workflow YAML content\n+    \"\"\"\n+    version_spec = f\"=={version_constraint}\" if version_constraint else \"\"\n+    return WORKFLOW_ENGINE_TEMPLATE.format(\n+        project_dir=project_dir,\n+        core_model=core_model,\n+        data_model=data_model,\n+        core_temperature=core_temperature,\n+        data_temperature=data_temperature,\n+        version_constraint=version_spec,\n+        additional_params=additional_params\n+    )\n+\n+\n+def write_workflow_file(content: str, filename: str, workflows_dir: str = \".github/workflows\") -> str:\n+    \"\"\"\n+    Write workflow content to a file in the GitHub workflows directory.\n+    \n+    Args:\n+        content: Workflow YAML content\n+        filename: Name of the workflow file\n+        workflows_dir: Directory for workflow files\n+        \n+    Returns:\n+        Path to the created workflow file\n+    \"\"\"\n+    # Ensure the workflows directory exists\n+    os.makedirs(workflows_dir, exist_ok=True)\n+    \n+    # Add .yml extension if not present\n+    if not filename.endswith(('.yml', '.yaml')):\n+        filename += '.yml'\n+    \n+    # Build the full path\n+    file_path = os.path.join(workflows_dir, filename)\n+    \n+    # Write content to file\n+    with open(file_path, 'w', encoding='utf-8') as f:\n+        f.write(content)\n+    \n+    return file_path\n+\n+\n+def generate_workflows(\n+    target_branch: str = \"main\",\n+    project_dir: str = \".\",\n+    core_model: str = \"gpt-4o\",\n+    data_model: str = \"gpt-4o\",\n+    core_temperature: float = 0.7,\n+    data_temperature: float = 0.7,\n+    version_constraint: str = \"\",\n+    file_memory_params: str = \"\",\n+    workflow_engine_params: str = \"\",\n+    workflows_dir: str = \".github/workflows\",\n+    memory_filename: str = \"file-memory-init\",\n+    engine_filename: str = \"bella-issues-bot\",\n+) -> Tuple[str, str]:\n+    \"\"\"\n+    Generate both GitHub Actions workflow files for bella-issues-bot.\n+    \n+    Returns:\n+        Tuple of paths to the created workflow files\n+    \"\"\"\n+    # Generate file memory workflow\n+    memory_content = generate_file_memory_workflow(\n+        target_branch, project_dir, core_model, core_temperature, version_constraint, file_memory_params)\n+    memory_path = write_workflow_file(memory_content, memory_filename, workflows_dir)\n+    \n+    # Generate workflow engine workflow\n+    engine_content = generate_workflow_engine_workflow(\n+        project_dir, core_model, data_model, core_temperature, data_temperature, version_constraint, workflow_engine_params)\n+    engine_path = write_workflow_file(engine_content, engine_filename, workflows_dir)\n+    \n+    return memory_path, engine_path\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/github_workflow_cli.py",
    "content": "diff\n--- /dev/null\n+++ client/github_workflow_cli.py\n@@ -0,0 +1,113 @@\n+\"\"\"\n+Command-line interface for the GitHub Workflow Generator.\n+Provides functionality to generate GitHub Actions workflow files for bella-issues-bot integration.\n+\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from typing import Optional, Dict, Tuple\n+from dotenv import load_dotenv\n+\n+from client.github_workflow_generator import generate_workflows\n+\n+\n+def parse_args() -> argparse.Namespace:\n+    \"\"\"Parse command-line arguments for GitHub workflow generation.\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=\"Generate GitHub Actions workflows for bella-issues-bot integration\"\n+    )\n+\n+    # Project configuration\n+    parser.add_argument(\n+        \"--project-dir\", \n+        \"-p\",\n+        type=str, \n+        default=\".\",\n+        help=\"Path to the project directory (default: current directory)\"\n+    )\n+    parser.add_argument(\n+        \"--workflows-dir\", \n+        \"-w\",\n+        type=str, \n+        default=\".github/workflows\",\n+        help=\"Directory for workflow files (default: .github/workflows)\"\n+    )\n+    parser.add_argument(\n+        \"--target-branch\", \n+        \"-b\",\n+        type=str, \n+        default=\"main\",\n+        help=\"Branch that triggers file memory initialization (default: main)\"\n+    )\n+    parser.add_argument(\n+        \"--version\", \n+        \"-v\",\n+        type=str, \n+        default=\"\",\n+        help=\"Version constraint for bella-issues-bot\"\n+    )\n+\n+    # Model configurations\n+    parser.add_argument(\n+        \"--model\", \n+        \"-m\",\n+        type=str,\n+        default=\"gpt-4o\", \n+        help=\"AI model for both core and data operations\"\n+    )\n+    parser.add_argument(\n+        \"--core-model\", \n+        \"--cm\",\n+        type=str, \n+        help=\"Core AI model (defaults to --model if not specified)\"\n+    )\n+    parser.add_argument(\n+        \"--data-model\", \n+        \"--dm\",\n+        type=str, \n+        help=\"Data AI model (defaults to --model if not specified)\"\n+    )\n+\n+    # Temperature configurations\n+    parser.add_argument(\n+        \"--temperature\",\n+        \"-t\",\n+        type=float,\n+        default=0.7, \n+        help=\"Temperature for both core and data models\"\n+    )\n+    parser.add_argument(\n+        \"--core-temperature\",\n+        \"--ct\",\n+        type=float, \n+        help=\"Temperature for core model (defaults to --temperature if not specified)\"\n+    )\n+    parser.add_argument(\n+        \"--data-temperature\",\n+        \"--dt\",\n+        type=float, \n+        help=\"Temperature for data model (defaults to --temperature if not specified)\"\n+    )\n+    \n+    # Additional parameters\n+    parser.add_argument(\n+        \"--file-memory-params\", \n+        type=str, \n+        default=\"\",\n+        help=\"Additional parameters for bella-file-memory\"\n+    )\n+    parser.add_argument(\n+        \"--workflow-engine-params\", \n+        type=str, \n+        default=\"\",\n+        help=\"Additional parameters for bella-issues-bot\"\n+    )\n+    \n+    # Output file names\n+    parser.add_argument(\n+        \"--memory-filename\", \n+        type=str, \n+        default=\"file-memory-init\",\n+        help=\"Filename for file memory workflow (default: file-memory-init.yml)\"\n+    )\n+    parser.add_argument(\n+        \"--engine-filename\", \n+        type=str, \n+        default=\"bella-issues-bot\",\n+        help=\"Filename for workflow engine (default: bella-issues-bot.yml)\"\n+    )\n+\n+    return parser.parse_args()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/github_workflow_main.py",
    "content": "diff\n--- /dev/null\n+++ client/github_workflow_main.py\n@@ -0,0 +1,76 @@\n+\"\"\"\n+Main module for the GitHub Workflow Generator.\n+Entry point for generating GitHub Actions workflows for bella-issues-bot integration.\n+\"\"\"\n+\n+import os\n+import sys\n+from dotenv import load_dotenv\n+\n+from client.github_workflow_cli import parse_args\n+from client.github_workflow_generator import generate_workflows\n+\n+\n+def main() -> int:\n+    \"\"\"\n+    Main entry point for GitHub workflow generation.\n+    \n+    Returns:\n+        int: Exit code (0 for success, 1 for error)\n+    \"\"\"\n+    # Load environment variables from .env if present\n+    load_dotenv()\n+    \n+    # Parse command-line arguments\n+    args = parse_args()\n+    \n+    # Set model values, with --model as default for core and data models\n+    core_model = args.core_model if args.core_model else args.model\n+    data_model = args.data_model if args.data_model else args.model\n+    \n+    # Set temperature values, with --temperature as default for core and data temperatures\n+    core_temperature = args.core_temperature if args.core_temperature is not None else args.temperature\n+    data_temperature = args.data_temperature if args.data_temperature is not None else args.temperature\n+    \n+    try:\n+        # Generate the workflows\n+        memory_path, engine_path = generate_workflows(\n+            target_branch=args.target_branch,\n+            project_dir=args.project_dir,\n+            core_model=core_model,\n+            data_model=data_model,\n+            core_temperature=core_temperature,\n+            data_temperature=data_temperature,\n+            version_constraint=args.version,\n+            file_memory_params=args.file_memory_params,\n+            workflow_engine_params=args.workflow_engine_params,\n+            workflows_dir=args.workflows_dir,\n+            memory_filename=args.memory_filename,\n+            engine_filename=args.engine_filename,\n+        )\n+        \n+        print(f\"Successfully generated GitHub workflow files:\")\n+        print(f\"  - File Memory Initialization: {memory_path}\")\n+        print(f\"  - Bella Issues Bot: {engine_path}\")\n+        print(\"\\nSetup instructions:\")\n+        print(\"1. Add these secrets to your GitHub repository:\")\n+        print(\"   - OPENAI_API_KEY: Your OpenAI API key\")\n+        print(\"   - BELLA_GITHUB_TOKEN: GitHub token with repo permissions\")\n+        print(\"   - OPENAI_API_BASE: (Optional) Custom OpenAI API base URL\")\n+        print(\"2. Commit and push the workflow files to your repository\")\n+        print(\"3. To trigger file memory initialization, push to the configured branch\")\n+        print(\"4. To test issue processing, create a new issue in your repository\")\n+        \n+        return 0\n+        \n+    except Exception as e:\n+        print(f\"Error generating workflows: {str(e)}\", file=sys.stderr)\n+        return 1\n+\n+\n+if __name__ == \"__main__\":\n+    sys.exit(main())\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/__init__.py",
    "content": "diff\n--- client/__init__.py\n+++ client/__init__.py\n@@ -2,3 +2,6 @@\n \n # Export file memory functions for programmatic use\n from client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n+\n+# Export GitHub workflow generator functions for programmatic use\n+from client.github_workflow_generator import generate_workflows, generate_file_memory_workflow, generate_workflow_engine_workflow\n\n",
    "file_content": "\"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n\n# Export file memory functions for programmatic use\nfrom client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "scripts/generate_github_workflows.sh",
    "content": "diff\n--- /dev/null\n+++ scripts/generate_github_workflows.sh\n@@ -0,0 +1,29 @@\n+#!/bin/bash\n+\n+# Script to generate GitHub Actions workflows for bella-issues-bot\n+# This script helps to generate workflows for file memory initialization and issue processing\n+\n+show_help() {\n+    echo \"Usage: $0 [options]\"\n+    echo \"\"\n+    echo \"Options:\"\n+    echo \"  -p, --project-dir DIR      Project directory (default: current directory)\"\n+    echo \"  -b, --branch BRANCH        Branch that triggers file memory init (default: main)\"\n+    echo \"  -m, --model MODEL          AI model for both operations (default: gpt-4o)\"\n+    echo \"  -t, --temp VALUE           Temperature (default: 0.7)\"\n+    echo \"  --cm, --core-model MODEL   Core AI model (defaults to --model)\"\n+    echo \"  --dm, --data-model MODEL   Data AI model (defaults to --model)\"\n+    echo \"  --ct, --core-temp VALUE    Core temperature (defaults to --temp)\"\n+    echo \"  --dt, --data-temp VALUE    Data temperature (defaults to --temp)\"\n+    echo \"  -v, --version VERSION      Version constraint for bella-issues-bot\"\n+    echo \"  -h, --help                 Show this help message\"\n+    echo \"\"\n+}\n+\n+if [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n+    show_help\n+    exit 0\n+fi\n+\n+# Pass all arguments to the Python module\n+python -m client.github_workflow_main \"$@\"\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "pyproject.toml",
    "content": "diff\n--- pyproject.toml\n+++ pyproject.toml\n@@ -48,6 +48,7 @@\n [tool.poetry.scripts]\n bella-issues-bot = 'client.terminal:run_workflow_from_terminal'\n bella-file-memory = 'client.file_memory_client:main'\n+bella-github-workflows = 'client.github_workflow_main:main'\n \n [tool.ruff]\n select = [\"F\", \"E\", \"W\", \"I001\"]\n\n",
    "file_content": "[tool.poetry]\nname = \"bella-issues-bot\"\nversion = \"0.1.1\"\ndescription = \"bella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：个人开发助手模式：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。GitHub自动化模式：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。\"\nauthors = [\"saizhuolin\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/szl97/bella-issues-bot\"\nrepository = \"https://github.com/szl97/bella-issues-bot\"\ndocumentation = \"https://github.com/szl97/bella-issues-bot\"\npackages = [\n    {include = \"core\"},\n    {include = \"client\"}\n]\ninclude = [\n    \"system.txt\"\n]\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry.dependencies]\npython = \">=3.10,<3.13\"\ngitpython = \"^3.1.40\"\nPyGithub = \"^2.1.1\"\nlangchain = \">=0.3.0,<0.4.0\"\nlangchain-openai = \">=0.1.0\"\nlangchain-core = \">=0.3.0,<0.4.0\"\nlangchain-community = \">=0.3.0,<0.4.0\"\npython-dotenv = \"^1.0.0\"\npydantic = \"^2.5.0\"\nopenai = \"^1.3.5\"\npytest = \"^7.4.0\"\npathspec = \">=0.9.0\"\ntoml = \">=0.10.2\"\ntyping-extensions = \">=4.0.0\"\njinja2 = \">=3.1.0,<4.0.0\"\ncolorlog = \">=6.8.0,<7.0.0\"\ncolorama = \">=0.4.4\"\nargparse = \">=1.4.0\"\npyyaml = \">=6.0\"\n\n[tool.poetry.scripts]\nbella-issues-bot = 'client.terminal:run_workflow_from_terminal'\nbella-file-memory = 'client.file_memory_client:main'\n\n[tool.ruff]\nselect = [\"F\", \"E\", \"W\", \"I001\"]\nshow-fixes = false\ntarget-version = \"py310\"\ntask-tags = [\"TODO\", \"FIXME\"]\nextend-ignore = [\"E501\", \"E722\"]\n\n[tool.black]\ntarget-version = [\"py310\"]\n\n[tool.ruff.isort]\nknown-first-party = []\nknown-third-party = []\nsection-order = [\n  \"future\",\n  \"standard-library\",\n  \"third-party\",\n  \"first-party\",\n  \"local-folder\",\n]\ncombine-as-imports = true\nsplit-on-trailing-comma = false\nlines-between-types = 1\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "client/README_GITHUB_WORKFLOWS.md",
    "content": "diff\n--- /dev/null\n+++ client/README_GITHUB_WORKFLOWS.md\n@@ -0,0 +1,87 @@\n+# GitHub Workflow Generator for bella-issues-bot\n+\n+This tool generates GitHub Actions workflow files to integrate bella-issues-bot into your project's GitHub workflow.\n+\n+## Generated Workflows\n+\n+The tool creates two GitHub Actions workflows:\n+\n+1. **File Memory Initialization** - Triggered when code is pushed to a specific branch (default: main)\n+   - Automatically analyzes the project structure and generates file descriptions\n+   - Builds the contextual memory needed for bella-issues-bot to understand your codebase\n+\n+2. **Bella Issues Bot** - Triggered when issues are opened/reopened or when comments are added to issues\n+   - Processes the issue or comment content as a user requirement\n+   - Generates and commits code changes based on the requirement\n+   - Responds to the issue with details of changes made\n+\n+## Installation\n+\n+\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "README.md",
    "content": "diff\n--- README.md\n+++ README.md\n@@ -72,6 +72,19 @@\n \n",
    "file_content": "# bella-issues-bot\n\n## 项目简介\n\nbella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：\n\n1. **个人开发助手模式**：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。\n2. **GitHub自动化模式**：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。\n\n通过对项目结构的深入理解和强大的代码生成能力，bella-issues-bot 能够显著提高开发效率，减少重复工作，让您专注于更有创造性的任务。\n\n## 主要功能\n\n- **需求分析**：自动理解和分解用户的功能需求\n- **代码生成**：根据需求生成符合项目风格的代码\n- **版本管理**：与Git集成，支持分支创建和代码提交\n- **记忆系统**：记录项目文件描述和操作历史，提供上下文感知能力\n\n## 记忆与上下文管理\n\nbella-issues-bot 配备了强大的记忆系统，由三个核心组件构成：\n\n### 1. 日志管理 (LogManager)\n\nLogManager 负责记录每次交互的完整历史，包括：\n- 系统提示词和用户需求\n- AI响应内容\n- 文件修改记录和差异对比\n\n这些日志按issue和轮次组织，支持历史追溯和问题诊断。每轮交互都会生成详细日志，便于追踪AI的决策过程和代码修改历史。\n\n### 2. 版本管理 (VersionManager)\n\nVersionManager 提供智能的版本控制功能：\n- 自动提取历史轮次的需求和响应\n- 生成格式化的历史执行记录作为上下文\n- 分析当前需求与历史需求的关系\n- 根据需要执行版本回退操作\n\n系统会分析新需求与先前修改的关系，判断是否需要回滚，确保代码修改的连贯性和一致性。\n\n### 3. 文件记忆 (FileMemory)\n\nFileMemory 模块为项目的每个文件维护详细描述：\n- 自动生成文件功能、结构和关系描述\n- 跟踪文件变更，更新受影响文件的描述\n- 提供上下文相关的文件选择\n- 支持配置忽略文件，默认包含项目的.gitignore，支持自定义添加.eng/.engignore\n\n这使得AI助手能够理解整个代码库的结构和功能，在修改代码时考虑到更广泛的项目上下文。\n\n## 安装方法\n\n使用pip安装：\n\n```bash\npip install bella-issues-bot\n```\n\n## 使用方法\n\nbella-issues-bot 提供了多种使用方式：\n\n### 个人开发模式\n\n在日常开发中，您可以通过命令行界面或编程API使用bella-issues-bot：\n\n#### 命令行使用\n\n```bash\nbella-issues-bot --issue-id <问题ID> --requirement \"你的需求描述\"\n```\n\n更多高级选项和详细使用说明，请参考[客户端文档](./client/README.md)。\n\n#### 编程API使用\n\n```python\nfrom client.runner import run_workflow\n\nrun_workflow(\n    issue_id=42,\n    requirement=\"创建一个简单的README文件\",\n    core_temperature=0.7\n)\n```\n\n## 环境变量配置\n\n工具会读取以下环境变量：\n\n- `OPENAI_API_KEY`: OpenAI API密钥\n- `OPENAI_API_BASE`: OpenAI API基础URL\n- `GITHUB_REMOTE_URL`: GitHub远程仓库URL\n- `GITHUB_TOKEN`: GitHub身份验证令牌\n- 在项目文件的.eng/目录下创建 .engignore文件，示例[examples](./.engignore.example)\n\n## 示例\n\n可以在[examples](./examples/)目录下找到使用示例。\n\n### 文件记忆初始化\n\n在项目根目录执行 `bella-file-memory` 可以初始化文件记忆系统，它会自动分析项目中的文件并生成描述信息。\n更多详细信息请参阅[文件记忆客户端文档](./client/README_FILE_MEMORY.md)。\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "examples/github_workflow_example.sh",
    "content": "diff\n--- /dev/null\n+++ examples/github_workflow_example.sh\n@@ -0,0 +1,14 @@\n+#!/bin/bash\n+\n+# Example of generating GitHub workflows with custom settings\n+\n+# Change to your project directory\n+cd /path/to/your/project\n+\n+# Generate GitHub workflows\n+bella-github-workflows \\\n+  --project-dir \".\" \\\n+  --target-branch \"main\" \\\n+  --model \"gpt-4o\" \\\n+  --temperature 0.7 \\\n+  --version \"0.1.1\"\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  }
]