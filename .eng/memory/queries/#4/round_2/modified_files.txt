[
  {
    "file_name": "client/github_workflow_generator.py",
    "content": "diff\n--- client/github_workflow_generator.py\n+++ client/github_workflow_generator.py\n@@ -21,6 +21,10 @@ logger = get_logger(__name__)\n MEMORY_INIT_TEMPLATE = \"\"\"name: Initialize File Memory\n \n on:\n+  workflow_dispatch:  # Allow manual triggering\n+    inputs:\n+      force_run:\n+        description: 'Force execution even for automated commits'\n   push:\n     branches:\n       - {branch}\n@@ -35,6 +39,12 @@ jobs:\n         uses: actions/checkout@v3\n         with:\n           fetch-depth: 0\n+          \n+      - name: Check if commit is from automation\n+        id: check_commit\n+        run: |\n+          COMMIT_MSG=$(git log -1 --pretty=format:\"%s\")\n+          echo \"is_bot_commit=$(echo $COMMIT_MSG | grep -q 'Update file memory' && echo 'true' || echo 'false')\" >> $GITHUB_OUTPUT\n \n       - name: Set up Python\n         uses: actions/setup-python@v4\n@@ -47,6 +57,7 @@ jobs:\n           pip install bella-issues-bot{package_version}\n \n       - name: Initialize file memory\n+        if: ${{{{ (github.event_name == 'workflow_dispatch' && github.event.inputs.force_run == 'true') || (steps.check_commit.outputs.is_bot_commit == 'false') }}}}\n         env:\n           OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n           OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n@@ -56,11 +67,12 @@ jobs:\n+        if: ${{{{ (github.event_name == 'workflow_dispatch' && github.event.inputs.force_run == 'true') || (steps.check_commit.outputs.is_bot_commit == 'false') }}}}\n         run: |\n           git config --local user.email \"action@github.com\"\n           git config --local user.name \"GitHub Action\"\n           git add .eng/memory/\n-          git diff --staged --quiet || git commit -m \"Update file memory\"\n+          git diff --staged --quiet || git commit -m \"Update file memory [skip ci]\"\n           git push\n \"\"\"\n \n@@ -79,7 +91,7 @@ jobs:\n     permissions:\n       contents: write\n       issues: write\n-    if: ${{{{ !startsWith(github.event.comment.body, 'bella-issues-bot已处理：') }}}}\n+    if: ${{{{ github.event_name == 'issues' || !startsWith(github.event.comment.body, 'bella-issues-bot已处理：') }}}}\n     steps:\n       - name: Checkout code\n         uses: actions/checkout@v3\n@@ -117,18 +129,12 @@ jobs:\n           OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n           GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n           GITHUB_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n+          ISSUE_ID: ${{{{ steps.issue.outputs.issue_id }}}}\n         run: |\n-          # Create a new branch for this issue\n-          git checkout -b bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}}\n-\n-          # Run bella-issues-bot in bot mode\n+          # Run bella-issues-bot in bot mode - it will handle branch creation and pushing\n           bella-issues-bot --mode bot --issue-id ${{{{ steps.issue.outputs.issue_id }}}} --core-model {core_model} --data-model {data_model} --core-temperature {core_temperature} --data-temperature {data_temperature} --requirement \"${{{{ steps.issue.outputs.requirement }}}}\"\n \n-          # Push changes to the new branch\n-          git push -u origin bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}}\n-          \n-          # Create a pull request\n-          PR_URL=$(gh pr create --title \"Fix for issue #${{{{ steps.issue.outputs.issue_id }}}}\" --body \"Automated PR by bella-issues-bot to address issue #${{{{ steps.issue.outputs.issue_id }}}}\" --base {base_branch})\n+          PR_URL=$(gh pr create --title \"Fix for issue #${{{{ steps.issue.outputs.issue_id }}}}\" --body \"Automated PR by bella-issues-bot to address issue #${{{{ steps.issue.outputs.issue_id }}}}\" --base {base_branch} --head bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}})\n           echo \"Created PR: $PR_URL\"\n         env:\n           GH_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n\n",
    "file_content": "\"\"\"\nGitHub Workflow Generator\n\nA module for generating GitHub Actions workflow files to integrate bella-issues-bot with GitHub.\nCreates two workflows:\n1. File Memory Initialization - Triggered on push to a configurable branch\n2. Issue Processing Bot - Triggered when issues are created or commented on\n\"\"\"\n\nimport argparse\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, Optional\n\nfrom core.log_config import get_logger, setup_logging\n\nlogger = get_logger(__name__)\n\n# Template for memory initialization workflow\nMEMORY_INIT_TEMPLATE = \"\"\"name: Initialize File Memory\n\non:\n  push:\n    branches:\n      - {branch}\n\njobs:\n  init-memory:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n      - name: Install bella-issues-bot\n        run: |\n          python -m pip install --upgrade pip\n          pip install bella-issues-bot{package_version}\n\n      - name: Initialize file memory\n        env:\n          OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n          OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n          GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n          GITHUB_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n        run: |\n          bella-file-memory -d . -m {model} -t {temperature}\n\n      - name: Commit memory files if changed\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add .eng/memory/\n          git diff --staged --quiet || git commit -m \"Update file memory\"\n          git push\n\"\"\"\n\n# Template for issue processing workflow\nISSUE_PROCESS_TEMPLATE = \"\"\"name: Process Issues with bella-issues-bot\n\non:\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n\njobs:\n  process-issue:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      issues: write\n    if: ${{{{ !startsWith(github.event.comment.body, 'bella-issues-bot已处理：') }}}}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n      - name: Install bella-issues-bot\n        run: |\n          python -m pip install --upgrade pip\n          pip install bella-issues-bot{package_version}\n\n      - name: Extract issue info\n        id: issue\n        run: |\n          if [[ \"${{{{ github.event_name }}}}\" == \"issues\" ]]; then\n            echo \"issue_id=${{{{ github.event.issue.number }}}}\" >> $GITHUB_OUTPUT\n            echo \"requirement<<EOF\" >> $GITHUB_OUTPUT\n            echo \"${{{{ github.event.issue.body }}}}\" >> $GITHUB_OUTPUT\n            echo \"EOF\" >> $GITHUB_OUTPUT\n          else\n            echo \"issue_id=${{{{ github.event.issue.number }}}}\" >> $GITHUB_OUTPUT\n            echo \"requirement<<EOF\" >> $GITHUB_OUTPUT\n            echo \"${{{{ github.event.comment.body }}}}\" >> $GITHUB_OUTPUT\n            echo \"EOF\" >> $GITHUB_OUTPUT\n          fi\n\n      - name: Process issue with bella-issues-bot\n        env:\n          OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}\n          OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}\n          GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}\n          GITHUB_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n        run: |\n          # Create a new branch for this issue\n          git checkout -b bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}}\n\n          # Run bella-issues-bot in bot mode\n          bella-issues-bot --mode bot --issue-id ${{{{ steps.issue.outputs.issue_id }}}} --core-model {core_model} --data-model {data_model} --core-temperature {core_temperature} --data-temperature {data_temperature} --requirement \"${{{{ steps.issue.outputs.requirement }}}}\"\n\n          # Push changes to the new branch\n          git push -u origin bella-issues-bot-${{{{ steps.issue.outputs.issue_id }}}}\n          \n          # Create a pull request\n          PR_URL=$(gh pr create --title \"Fix for issue #${{{{ steps.issue.outputs.issue_id }}}}\" --body \"Automated PR by bella-issues-bot to address issue #${{{{ steps.issue.outputs.issue_id }}}}\" --base {base_branch})\n          echo \"Created PR: $PR_URL\"\n        env:\n          GH_TOKEN: ${{{{ secrets.GITHUB_TOKEN }}}}\n\"\"\"\n\ndef generate_workflow_files(\n    output_dir: str,\n    memory_branch: str = \"main\",\n    base_branch: str = \"main\",\n    model: str = \"gpt-4o\",\n    core_model: Optional[str] = None,\n    data_model: Optional[str] = None,\n    temperature: float = 0.7,\n    core_temperature: Optional[float] = None,\n    data_temperature: Optional[float] = None,\n    package_version: str = \"\"\n) -> Dict[str, str]:\n    \"\"\"\n    Generate GitHub workflow YAML files.\n    \n    Args:\n        output_dir: Directory to write workflow files\n        memory_branch: Branch that triggers memory initialization\n        base_branch: Base branch for pull requests\n        model: Default model to use for all operations\n        core_model: Model for core operations (if different from model)\n        data_model: Model for data operations (if different from model)\n        temperature: Default temperature setting for all models\n        core_temperature: Temperature for core model (if different)\n        data_temperature: Temperature for data model (if different)\n        package_version: Specific version of package to install (e.g. \"==0.1.1\")\n        \n    Returns:\n        Dictionary mapping file paths to their contents\n    \"\"\"\n    workflows_dir = os.path.join(output_dir, \".github\", \"workflows\")\n    os.makedirs(workflows_dir, exist_ok=True)\n    \n    # Format version specification if provided\n    if package_version and not package_version.startswith(\"==\"):\n        package_version = f\"=={package_version}\"\n    \n    # Use provided models or default to the general model\n    actual_core_model = core_model or model\n    actual_data_model = data_model or model\n    \n    # Use provided temperatures or default to the general temperature\n    actual_core_temp = core_temperature if core_temperature is not None else temperature\n    actual_data_temp = data_temperature if data_temperature is not None else temperature\n    \n    # Generate memory initialization workflow\n    memory_workflow_path = os.path.join(workflows_dir, \"memory_init.yml\")\n    memory_workflow_content = MEMORY_INIT_TEMPLATE.format(\n        branch=memory_branch,\n        model=model,\n        temperature=temperature,\n        package_version=package_version\n    )\n    \n    # Generate issue processing workflow\n    issue_workflow_path = os.path.join(workflows_dir, \"issue_process.yml\")\n    issue_workflow_content = ISSUE_PROCESS_TEMPLATE.format(\n        core_model=actual_core_model,\n        data_model=actual_data_model,\n        core_temperature=actual_core_temp,\n        data_temperature=actual_data_temp,\n        base_branch=base_branch,\n        package_version=package_version\n    )\n    \n    # Write the files\n    with open(memory_workflow_path, 'w') as f:\n        f.write(memory_workflow_content)\n    \n    with open(issue_workflow_path, 'w') as f:\n        f.write(issue_workflow_content)\n    \n    logger.info(f\"Generated workflow files in {workflows_dir}\")\n    \n    return {\n        memory_workflow_path: memory_workflow_content,\n        issue_workflow_path: issue_workflow_content\n    }\n\ndef main() -> None:\n    \"\"\"Command line interface for GitHub workflow generator.\"\"\"\n    parser = argparse.ArgumentParser(description=\"Generate GitHub Actions workflows for bella-issues-bot integration\")\n    parser.add_argument(\"--output\", \"-o\", type=str, default=\".\", help=\"Output directory (default: current directory)\")\n    parser.add_argument(\"--memory-branch\", \"-mb\", type=str, default=\"main\", help=\"Branch that triggers memory initialization (default: main)\")\n    parser.add_argument(\"--base-branch\", \"-bb\", type=str, default=\"main\", help=\"Base branch for pull requests (default: main)\")\n    parser.add_argument(\"--model\", \"-m\", type=str, default=\"gpt-4o\", help=\"Default model for all operations (default: gpt-4o)\")\n    parser.add_argument(\"--core-model\", \"--cm\", type=str, help=\"Model for core operations (defaults to --model)\")\n    parser.add_argument(\"--data-model\", \"--dm\", type=str, help=\"Model for data operations (defaults to --model)\")\n    parser.add_argument(\"--temperature\", \"-t\", type=float, default=0.7, help=\"Default temperature for all models (default: 0.7)\")\n    parser.add_argument(\"--core-temperature\", \"--ct\", type=float, help=\"Temperature for core model (defaults to --temperature)\")\n    parser.add_argument(\"--data-temperature\", \"--dt\", type=float, help=\"Temperature for data model (defaults to --temperature)\")\n    parser.add_argument(\"--package-version\", \"-v\", type=str, default=\"\", help=\"Specific package version to install (e.g. '0.1.1')\")\n    parser.add_argument(\"--log-level\", \"-l\", type=str, choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"], default=\"INFO\", help=\"Logging level\")\n    \n    args = parser.parse_args()\n    \n    # Setup logging\n    import logging\n    setup_logging(log_level=getattr(logging, args.log_level))\n    \n    # Generate workflow files\n    try:\n        generate_workflow_files(\n            output_dir=args.output,\n            memory_branch=args.memory_branch,\n            base_branch=args.base_branch,\n            model=args.model,\n            core_model=args.core_model,\n            data_model=args.data_model,\n            temperature=args.temperature,\n            core_temperature=args.core_temperature,\n            data_temperature=args.data_temperature,\n            package_version=args.package_version\n        )\n        logger.info(\"Successfully generated GitHub workflow files\")\n    except Exception as e:\n        logger.error(f\"Error generating workflow files: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "client/README_GITHUB_WORKFLOWS.md",
    "content": "diff\n--- client/README_GITHUB_WORKFLOWS.md\n+++ client/README_GITHUB_WORKFLOWS.md\n@@ -8,7 +8,8 @@ bella-issues-bot 提供了自动生成 GitHub Actions 工作流配置的功能\n \n 1. **记忆初始化工作流** (`memory_init.yml`)\n    - 当指定分支有推送时触发\n-   - 自动分析项目文件并生成文件描述\n+   - 会跳过机器人自身的提交（通过检查提交信息中的\"Update file memory\"）\n+   - 分析项目文件并生成文件描述\n    - 将记忆文件提交回仓库\n \n 2. **Issue处理工作流** (`issue_process.yml`)\n@@ -51,11 +52,14 @@ bella-github-workflows [选项]\n ### 记忆初始化工作流 (`memory_init.yml`)\n \n 此工作流在指定分支有推送时运行，它：\n-1. 检出代码库\n-2. 设置Python环境\n-3. 安装bella-issues-bot\n-4. 初始化文件记忆系统，生成项目文件描述\n-5. 将生成的记忆文件提交回仓库\n+1. 检查提交是否由自动化机器人产生（含有\"Update file memory\"的提交信息）\n+   - 如果是机器人提交，则会跳过执行，防止无限循环\n+   - 可以通过workflow_dispatch手动触发并强制执行\n+2. 检出代码库\n+3. 设置Python环境\n+4. 安装bella-issues-bot\n+5. 初始化文件记忆系统，生成项目文件描述\n+6. 将生成的记忆文件提交回仓库（提交信息带有[skip ci]标记）\n \n ### Issue处理工作流 (`issue_process.yml`)\n \n@@ -64,10 +68,9 @@ bella-github-workflows [选项]\n-5. 创建专用分支处理需求\n-6. 运行bella-issues-bot处理需求并生成代码\n-7. 将更改推送到专用分支\n-8. 创建拉取请求\n+5. 运行bella-issues-bot处理需求（它会自动创建分支并提交代码）\n+   - 如果评论以\"bella-issues-bot已处理：\"开头，则跳过处理\n+6. 创建拉取请求\n 9. 在Issue中添加处理结果的评论\n \n ## GitHub配置要求\n\n",
    "file_content": "# GitHub工作流生成器\n\nbella-issues-bot 提供了自动生成 GitHub Actions 工作流配置的功能，可以轻松将 AI 助手集成到您的 GitHub 项目中。\n\n## 功能概述\n\n工作流生成器会创建两个GitHub Actions工作流文件：\n\n1. **记忆初始化工作流** (`memory_init.yml`)\n   - 当指定分支有推送时触发\n   - 自动分析项目文件并生成文件描述\n   - 将记忆文件提交回仓库\n\n2. **Issue处理工作流** (`issue_process.yml`)\n   - 在创建新Issue或添加评论时触发\n   - 自动提取Issue或评论中的需求\n   - 在专用分支上处理需求并实现代码\n   - 创建拉取请求，提供解决方案\n   - 在Issue中添加处理结果的评论\n\n## 命令行使用方式\n\n\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "scripts/generate_workflows.sh",
    "content": "diff\n--- scripts/generate_workflows.sh\n+++ scripts/generate_workflows.sh\n@@ -10,7 +10,7 @@ show_help() {\n     echo \"Options:\"\n     echo \"  -o, --output DIR        Output directory (default: current directory)\"\n     echo \"  -mb, --memory-branch    Branch that triggers memory initialization (default: main)\"\n-    echo \"  -bb, --base-branch      Base branch for pull requests (default: main)\"\n+    echo \"  -bb, --base-branch      Base branch for pull requests (default: main)\" \n     echo \"  -m, --model MODEL       Default model for all operations (default: gpt-4o)\"\n     echo \"  -t, --temp VALUE        Default temperature setting (default: 0.7)\"\n     echo \"  -v, --version VERSION   Specific package version to install (e.g. '0.1.1')\"\n@@ -19,6 +19,15 @@ show_help() {\n     echo \"Run 'bella-github-workflows --help' for complete details.\"\n     echo \"\"\n }\n+\n+# Check if script can be executed on current system\n+check_requirements() {\n+    if ! command -v python &> /dev/null; then\n+        echo \"Error: Python is required but not found\"\n+        exit 1\n+    fi\n+}\n+check_requirements\n \n if [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n     show_help\n\n",
    "file_content": "#!/bin/bash\n\n# Script to generate GitHub workflow files for bella-issues-bot integration\n# This script provides a simple interface to the workflow generator\n\nshow_help() {\n    echo \"Usage: $0 [options]\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  -o, --output DIR        Output directory (default: current directory)\"\n    echo \"  -mb, --memory-branch    Branch that triggers memory initialization (default: main)\"\n    echo \"  -bb, --base-branch      Base branch for pull requests (default: main)\"\n    echo \"  -m, --model MODEL       Default model for all operations (default: gpt-4o)\"\n    echo \"  -t, --temp VALUE        Default temperature setting (default: 0.7)\"\n    echo \"  -v, --version VERSION   Specific package version to install (e.g. '0.1.1')\"\n    echo \"  -h, --help              Show this help message\"\n    echo \"\"\n    echo \"Additional options like --core-model, --data-model, etc. are also supported.\"\n    echo \"Run 'bella-github-workflows --help' for complete details.\"\n    echo \"\"\n}\n\nif [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n    show_help\n    exit 0\nfi\n\n# Pass all arguments to the Python module\npython -m client.github_workflow_generator \"$@\"\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]