[
  {
    "file_name": "README.md",
    "content": "diff\n--- README.md\n+++ README.md\n@@ -94,3 +94,10 @@\n - `GITHUB_TOKEN`: GitHub身份验证令牌\n \n ## 示例\n+\n+可以在[examples](./examples/)目录下找到使用示例。\n+\n+### 文件记忆初始化\n+\n+在项目根目录执行 `bella-file-memory` 可以初始化文件记忆系统，它会自动分析项目中的文件并生成描述信息。\n+更多详细信息请参阅[文件记忆客户端文档](./client/README_FILE_MEMORY.md)。\n\n",
    "file_content": "# bella-issues-bot\n\n## 项目简介\n\nbella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：\n\n1. **个人开发助手模式**：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。\n2. **GitHub自动化模式**：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。\n\n通过对项目结构的深入理解和强大的代码生成能力，bella-issues-bot 能够显著提高开发效率，减少重复工作，让您专注于更有创造性的任务。\n\n## 主要功能\n\n- **需求分析**：自动理解和分解用户的功能需求\n- **代码生成**：根据需求生成符合项目风格的代码\n- **版本管理**：与Git集成，支持分支创建和代码提交\n- **记忆系统**：记录项目文件描述和操作历史，提供上下文感知能力\n\n## 记忆与上下文管理\n\nbella-issues-bot 配备了强大的记忆系统，由三个核心组件构成：\n\n### 1. 日志管理 (LogManager)\n\nLogManager 负责记录每次交互的完整历史，包括：\n- 系统提示词和用户需求\n- AI响应内容\n- 文件修改记录和差异对比\n\n这些日志按issue和轮次组织，支持历史追溯和问题诊断。每轮交互都会生成详细日志，便于追踪AI的决策过程和代码修改历史。\n\n### 2. 版本管理 (VersionManager)\n\nVersionManager 提供智能的版本控制功能：\n- 自动提取历史轮次的需求和响应\n- 生成格式化的历史执行记录作为上下文\n- 分析当前需求与历史需求的关系\n- 根据需要执行版本回退操作\n\n系统会分析新需求与先前修改的关系，判断是否需要回滚，确保代码修改的连贯性和一致性。\n\n### 3. 文件记忆 (FileMemory)\n\nFileMemory 模块为项目的每个文件维护详细描述：\n- 自动生成文件功能、结构和关系描述\n- 跟踪文件变更，更新受影响文件的描述\n- 提供上下文相关的文件选择\n\n这使得AI助手能够理解整个代码库的结构和功能，在修改代码时考虑到更广泛的项目上下文。\n\n## 安装方法\n\n使用pip安装：\n\n```bash\npip install bella-issues-bot\n```\n\n## 使用方法\n\nbella-issues-bot 提供了多种使用方式：\n\n### 个人开发模式\n\n在日常开发中，您可以通过命令行界面或编程API使用bella-issues-bot：\n\n#### 命令行使用\n\n```bash\nbella-issues-bot --issue-id <问题ID> --requirement \"你的需求描述\"\n```\n\n更多高级选项和详细使用说明，请参考[客户端文档](./client/README.md)。\n\n#### 编程API使用\n\n```python\nfrom client.runner import run_workflow\n\nrun_workflow(\n    issue_id=42,\n    requirement=\"创建一个简单的README文件\",\n    core_temperature=0.7\n)\n```\n\n## 环境变量配置\n\n工具会读取以下环境变量：\n\n- `OPENAI_API_KEY`: OpenAI API密钥\n- `OPENAI_API_BASE`: OpenAI API基础URL\n- `GITHUB_REMOTE_URL`: GitHub远程仓库URL\n- `GITHUB_TOKEN`: GitHub身份验证令牌\n\n## 示例\n\n可以在[examples](./examples/)目录下找到使用示例。",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "client/README_FILE_MEMORY.md",
    "content": "diff\n--- /dev/null\n+++ client/README_FILE_MEMORY.md\n@@ -0,0 +1,148 @@\n+# FileMemory 客户端\n+\n+FileMemory 是 bella-issues-bot 的强大记忆系统组件之一，负责维护项目中所有文件的功能描述。通过 FileMemory，系统能够了解项目的整体结构和每个文件的作用，从而在处理用户需求时提供更加上下文相关的代码生成和修改。\n+\n+## 特点与优势\n+\n+- **文件功能描述**：自动分析并生成项目中每个文件的功能描述\n+- **智能增量更新**：只为新增和变更的文件生成描述，提高效率\n+- **Git 集成**：使用 Git 历史记录追踪文件变更\n+- **独立运行**：可以独立于主工作流运行，专注于文件记忆维护\n+- **批量处理**：智能地将文件分批处理，可处理大型项目\n+- **失败重试**：提供对失败文件的重试机制\n+\n+## 安装\n+\n+FileMemory 客户端作为 bella-issues-bot 的一部分安装:\n+\n+\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/__init__.py",
    "content": "diff\n--- client/__init__.py\n+++ client/__init__.py\n@@ -1,3 +1,5 @@\n \"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n \n # Export file memory functions for programmatic use\n+from client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n+\n\n",
    "file_content": "\"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n\n# Export file memory functions for programmatic use\nfrom client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]