I'll create a script to execute the file memory initialization command and update the `pyproject.toml` file to include this command. This will allow users to easily initialize file memory using the GitManager approach without LogManager.

Let's analyze what we need to do:
1. Add a script entry to `pyproject.toml` for the file memory client
2. Create the necessary file memory client module that will be used by this script

Let's start with implementing the changes:

```diff
--- pyproject.toml
+++ pyproject.toml
@@ -45,6 +45,7 @@
 [tool.poetry.scripts]
 bella-issues-bot = 'client.terminal:run_workflow_from_terminal'
+bella-file-memory = 'client.file_memory_client:main'
 
 [tool.ruff]
 select = ["F", "E", "W", "I001"]
```

Now, let's implement the file memory client module that will be referenced in the scripts section:

```diff
--- /dev/null
+++ client/file_memory_client.py
@@ -0,0 +1,124 @@
+"""
+File Memory Client
+
+A standalone client for initializing and managing FileMemory using only GitManager.
+This module provides both CLI and programmatic interfaces for updating file descriptions.
+"""
+
+import argparse
+import logging
+import os
+import sys
+from typing import Dict, List, Optional
+
+from dotenv import load_dotenv
+
+from core.ai import AIConfig
+from core.file_memory import FileMemory, FileMemoryConfig
+from core.git_manager import GitManager, GitConfig
+from core.log_config import setup_logging, get_logger
+
+logger = get_logger(__name__)
+
+
+def initialize_file_memory(
+    project_dir: str,
+    model_name: str = "gpt-4o",
+    temperature: float = 0.7,
+    api_key: Optional[str] = None,
+    base_url: Optional[str] = None,
+    remote_url: Optional[str] = None,
+    auth_token: Optional[str] = None,
+) -> FileMemory:
+    """
+    Initialize FileMemory using GitManager without LogManager.
+    
+    Args:
+        project_dir: Path to the project directory
+        model_name: AI model to use for generating file descriptions
+        temperature: Temperature setting for AI responses
+        api_key: API key for AI service (will use env var if None)
+        base_url: Base URL for AI service (will use default if None)
+        remote_url: Git remote URL (will use env var if None)
+        auth_token: Git authentication token (will use env var if None)
+        
+    Returns:
+        Initialized FileMemory instance
+    """
+    # Create AI config
+    ai_config = AIConfig(
+        model_name=model_name,
+        temperature=temperature,
+        api_key=api_key,
+        base_url=base_url
+    )
+    
+    # Create Git config
+    git_config = GitConfig(
+        repo_path=project_dir,
+        remote_url=remote_url or os.getenv("GIT_REMOTE_URL"),
+        auth_token=auth_token or os.getenv("GITHUB_TOKEN")
+    )
+    
+    # Initialize Git manager
+    git_manager = GitManager(config=git_config)
+    
+    # Initialize and return FileMemory
+    file_memory_config = FileMemoryConfig(
+        project_dir=project_dir,
+        git_manager=git_manager,
+        ai_config=ai_config,
+        log_manager=None  # Explicitly set to None as per requirements
+    )
+    
+    return FileMemory(config=file_memory_config)
+
+
+def update_file_descriptions(file_memory: FileMemory) -> Dict[str, str]:
+    """
+    Update file descriptions using the given FileMemory instance.
+    
+    Args:
+        file_memory: Initialized FileMemory instance
+        
+    Returns:
+        Dictionary mapping file paths to their descriptions
+    """
+    return file_memory.update_file_details()
+
+
+def process_failed_files(file_memory: FileMemory) -> Dict[str, str]:
+    """
+    Process previously failed files to generate their descriptions.
+    
+    Args:
+        file_memory: Initialized FileMemory instance
+        
+    Returns:
+        Dictionary mapping file paths to their descriptions
+    """
+    return file_memory.process_failed_files()
+
+
+def main() -> None:
+    """Command line interface for FileMemory client."""
+    # Load environment variables
+    load_dotenv()
+    
+    # Parse command line arguments
+    parser = argparse.ArgumentParser(description="FileMemory Client - Update file descriptions for a project")
+    parser.add_argument("-d", "--directory", default=".", help="Project directory path (default: current directory)")
+    parser.add_argument("-m", "--model", default="gpt-4o", help="AI model name (default: gpt-4o)")
+    parser.add_argument("-t", "--temperature", type=float, default=0.7, help="AI temperature (default: 0.7)")
+    parser.add_argument("-k", "--api-key", help="OpenAI API key (defaults to OPENAI_API_KEY env var)")
+    parser.add_argument("-u", "--base-url", help="Base URL for API calls (optional)")
+    parser.add_argument("--git-url", help="Git remote URL (defaults to GIT_REMOTE_URL env var)")
+    parser.add_argument("--git-token", help="Git auth token (defaults to GITHUB_TOKEN env var)")
+    parser.add_argument("-l", "--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="INFO", help="Logging level")
+    parser.add_argument("--failed-only", action="store_true", help="Process only previously failed files")
+    args = parser.parse_args()
+    
+    # Setup logging
+    setup_logging(log_level=getattr(logging, args.log_level))
+    
+    # Get absolute path for project directory
+    project_dir = os.path.abspath(args.directory)
+    if not os.path.isdir(project_dir):
+        logger.error(f"Project directory does not exist: {project_dir}")
+        sys.exit(1)
+    
+    logger.info(f"Initializing FileMemory for project: {project_dir}")
+    
+    # Initialize FileMemory
+    file_memory = initialize_file_memory(
+        project_dir=project_dir,
+        model_name=args.model,
+        temperature=args.temperature,
+        api_key=args.api_key,
+        base_url=args.base_url,
+        remote_url=args.git_url,
+        auth_token=args.git_token
+    )
+    
+    # Update file details or process failed files
+    if args.failed_only:
+        result = process_failed_files(file_memory)
+        logger.info(f"Processed {len(result)} previously failed files")
+    else:
+        result = update_file_descriptions(file_memory)
+        logger.info(f"Updated descriptions for {len(result)} files")
+
+
+if __name__ == "__main__":
+    main()
```

Now, let's create a simple shell script for easier execution:

```diff
--- /dev/null
+++ scripts/init_file_memory.sh
@@ -0,0 +1,26 @@
+#!/bin/bash
+
+# Script to initialize file memory using GitManager (without LogManager)
+
+show_help() {
+    echo "Usage: $0 [options]"
+    echo ""
+    echo "Options:"
+    echo "  -d, --directory DIR    Set project directory (default: current directory)"
+    echo "  -m, --model MODEL      Set AI model (default: gpt-4o)"
+    echo "  -t, --temp VALUE       Set temperature (default: 0.7)"
+    echo "  -f, --failed-only      Process only previously failed files"
+    echo "  -h, --help             Show this help message"
+    echo ""
+}
+
+if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
+    show_help
+    exit 0
+fi
+
+# Pass all arguments to the Python module
+python -m client.file_memory_client "$@"
+
+# Exit with the same status code as the Python command
+exit $?
```

Now, let's update the client/__init__.py file to export the new functions:

```diff
--- client/__init__.py
+++ client/__init__.py
@@ -1 +1,4 @@
 """Client package for running the WorkflowEngine from the terminal."""
+
+# Export file memory functions for programmatic use
+from client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files
```

Let's make the shell script executable:

```diff
--- scripts/init_file_memory.sh
+++ scripts/init_file_memory.sh
@@ -0,0 +1,27 @@
+#!/bin/bash
+
+# Script to initialize file memory using GitManager (without LogManager)
+# This script helps to run the bella-file-memory command with common options
+
+show_help() {
+    echo "Usage: $0 [options]"
+    echo ""
+    echo "Options:"
+    echo "  -d, --directory DIR    Set project directory (default: current directory)"
+    echo "  -m, --model MODEL      Set AI model (default: gpt-4o)"
+    echo "  -t, --temp VALUE       Set temperature (default: 0.7)"
+    echo "  -f, --failed-only      Process only previously failed files"
+    echo "  -h, --help             Show this help message"
+    echo ""
+}
+
+if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
+    show_help
+    exit 0
+fi
+
+# Pass all arguments to the Python module
+python -m client.file_memory_client "$@"
+
+# Exit with the same status code as the Python command
+exit $?
```

This implementation:

1. Adds a new script entry `bella-file-memory` in `pyproject.toml` that points to `client.file_memory_client:main`
2. Creates the `client/file_memory_client.py` module with:
   - Functions to initialize FileMemory with only GitManager (no LogManager)
   - A main function that parses command line arguments and runs the file memory initialization
3. Creates a helper shell script `scripts/init_file_memory.sh` for easier execution
4. Updates `client/__init__.py` to export the new functions for programmatic use

With these changes, users can initialize file memory in several ways:
- Using the Poetry-installed command: `bella-file-memory`
- Running the Python module directly: `python -m client.file_memory_client`
- Using the shell script: `./scripts/init_file_memory.sh`
- Programmatically by importing the functions: `from client import initialize_file_memory`

This concludes a fully working implementation.