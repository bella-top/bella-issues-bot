[
  {
    "file_name": "pyproject.toml",
    "content": "diff\n--- pyproject.toml\n+++ pyproject.toml\n@@ -45,6 +45,7 @@\n [tool.poetry.scripts]\n bella-issues-bot = 'client.terminal:run_workflow_from_terminal'\n+bella-file-memory = 'client.file_memory_client:main'\n \n [tool.ruff]\n select = [\"F\", \"E\", \"W\", \"I001\"]\n\n",
    "file_content": "[tool.poetry]\nname = \"bella-issues-bot\"\nversion = \"0.1.1\"\ndescription = \"bella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：个人开发助手模式：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。GitHub自动化模式：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。\"\nauthors = [\"saizhuolin\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/szl97/bella-issues-bot\"\nrepository = \"https://github.com/szl97/bella-issues-bot\"\ndocumentation = \"https://github.com/szl97/bella-issues-bot\"\npackages = [\n    {include = \"core\"},\n    {include = \"client\"}\n]\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry.dependencies]\npython = \">=3.10,<3.13\"\ngitpython = \"^3.1.40\"\nPyGithub = \"^2.1.1\"\nlangchain = \">=0.3.0,<0.4.0\"\nlangchain-openai = \">=0.1.0\"\nlangchain-core = \">=0.3.0,<0.4.0\"\nlangchain-community = \">=0.3.0,<0.4.0\"\npython-dotenv = \"^1.0.0\"\npydantic = \"^2.5.0\"\nopenai = \"^1.3.5\"\npytest = \"^7.4.0\"\npathspec = \">=0.9.0\"\ntoml = \">=0.10.2\"\ntyping-extensions = \">=4.0.0\"\njinja2 = \">=3.1.0,<4.0.0\"\ncolorlog = \">=6.8.0,<7.0.0\"\ncolorama = \">=0.4.4\"\nargparse = \">=1.4.0\"\npyyaml = \">=6.0\"\n\n[tool.poetry.scripts]\nbella-issues-bot = 'client.terminal:run_workflow_from_terminal'\n\n[tool.ruff]\nselect = [\"F\", \"E\", \"W\", \"I001\"]\nshow-fixes = false\ntarget-version = \"py310\"\ntask-tags = [\"TODO\", \"FIXME\"]\nextend-ignore = [\"E501\", \"E722\"]\n\n[tool.black]\ntarget-version = [\"py310\"]\n\n[tool.ruff.isort]\nknown-first-party = []\nknown-third-party = []\nsection-order = [\n  \"future\",\n  \"standard-library\",\n  \"third-party\",\n  \"first-party\",\n  \"local-folder\",\n]\ncombine-as-imports = true\nsplit-on-trailing-comma = false\nlines-between-types = 1\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "client/file_memory_client.py",
    "content": "diff\n--- /dev/null\n+++ client/file_memory_client.py\n@@ -0,0 +1,124 @@\n+\"\"\"\n+File Memory Client\n+\n+A standalone client for initializing and managing FileMemory using only GitManager.\n+This module provides both CLI and programmatic interfaces for updating file descriptions.\n+\"\"\"\n+\n+import argparse\n+import logging\n+import os\n+import sys\n+from typing import Dict, List, Optional\n+\n+from dotenv import load_dotenv\n+\n+from core.ai import AIConfig\n+from core.file_memory import FileMemory, FileMemoryConfig\n+from core.git_manager import GitManager, GitConfig\n+from core.log_config import setup_logging, get_logger\n+\n+logger = get_logger(__name__)\n+\n+\n+def initialize_file_memory(\n+    project_dir: str,\n+    model_name: str = \"gpt-4o\",\n+    temperature: float = 0.7,\n+    api_key: Optional[str] = None,\n+    base_url: Optional[str] = None,\n+    remote_url: Optional[str] = None,\n+    auth_token: Optional[str] = None,\n+) -> FileMemory:\n+    \"\"\"\n+    Initialize FileMemory using GitManager without LogManager.\n+    \n+    Args:\n+        project_dir: Path to the project directory\n+        model_name: AI model to use for generating file descriptions\n+        temperature: Temperature setting for AI responses\n+        api_key: API key for AI service (will use env var if None)\n+        base_url: Base URL for AI service (will use default if None)\n+        remote_url: Git remote URL (will use env var if None)\n+        auth_token: Git authentication token (will use env var if None)\n+        \n+    Returns:\n+        Initialized FileMemory instance\n+    \"\"\"\n+    # Create AI config\n+    ai_config = AIConfig(\n+        model_name=model_name,\n+        temperature=temperature,\n+        api_key=api_key,\n+        base_url=base_url\n+    )\n+    \n+    # Create Git config\n+    git_config = GitConfig(\n+        repo_path=project_dir,\n+        remote_url=remote_url or os.getenv(\"GIT_REMOTE_URL\"),\n+        auth_token=auth_token or os.getenv(\"GITHUB_TOKEN\")\n+    )\n+    \n+    # Initialize Git manager\n+    git_manager = GitManager(config=git_config)\n+    \n+    # Initialize and return FileMemory\n+    file_memory_config = FileMemoryConfig(\n+        project_dir=project_dir,\n+        git_manager=git_manager,\n+        ai_config=ai_config,\n+        log_manager=None  # Explicitly set to None as per requirements\n+    )\n+    \n+    return FileMemory(config=file_memory_config)\n+\n+\n+def update_file_descriptions(file_memory: FileMemory) -> Dict[str, str]:\n+    \"\"\"\n+    Update file descriptions using the given FileMemory instance.\n+    \n+    Args:\n+        file_memory: Initialized FileMemory instance\n+        \n+    Returns:\n+        Dictionary mapping file paths to their descriptions\n+    \"\"\"\n+    return file_memory.update_file_details()\n+\n+\n+def process_failed_files(file_memory: FileMemory) -> Dict[str, str]:\n+    \"\"\"\n+    Process previously failed files to generate their descriptions.\n+    \n+    Args:\n+        file_memory: Initialized FileMemory instance\n+        \n+    Returns:\n+        Dictionary mapping file paths to their descriptions\n+    \"\"\"\n+    return file_memory.process_failed_files()\n+\n+\n+def main() -> None:\n+    \"\"\"Command line interface for FileMemory client.\"\"\"\n+    # Load environment variables\n+    load_dotenv()\n+    \n+    # Parse command line arguments\n+    parser = argparse.ArgumentParser(description=\"FileMemory Client - Update file descriptions for a project\")\n+    parser.add_argument(\"-d\", \"--directory\", default=\".\", help=\"Project directory path (default: current directory)\")\n+    parser.add_argument(\"-m\", \"--model\", default=\"gpt-4o\", help=\"AI model name (default: gpt-4o)\")\n+    parser.add_argument(\"-t\", \"--temperature\", type=float, default=0.7, help=\"AI temperature (default: 0.7)\")\n+    parser.add_argument(\"-k\", \"--api-key\", help=\"OpenAI API key (defaults to OPENAI_API_KEY env var)\")\n+    parser.add_argument(\"-u\", \"--base-url\", help=\"Base URL for API calls (optional)\")\n+    parser.add_argument(\"--git-url\", help=\"Git remote URL (defaults to GIT_REMOTE_URL env var)\")\n+    parser.add_argument(\"--git-token\", help=\"Git auth token (defaults to GITHUB_TOKEN env var)\")\n+    parser.add_argument(\"-l\", \"--log-level\", choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"], default=\"INFO\", help=\"Logging level\")\n+    parser.add_argument(\"--failed-only\", action=\"store_true\", help=\"Process only previously failed files\")\n+    args = parser.parse_args()\n+    \n+    # Setup logging\n+    setup_logging(log_level=getattr(logging, args.log_level))\n+    \n+    # Get absolute path for project directory\n+    project_dir = os.path.abspath(args.directory)\n+    if not os.path.isdir(project_dir):\n+        logger.error(f\"Project directory does not exist: {project_dir}\")\n+        sys.exit(1)\n+    \n+    logger.info(f\"Initializing FileMemory for project: {project_dir}\")\n+    \n+    # Initialize FileMemory\n+    file_memory = initialize_file_memory(\n+        project_dir=project_dir,\n+        model_name=args.model,\n+        temperature=args.temperature,\n+        api_key=args.api_key,\n+        base_url=args.base_url,\n+        remote_url=args.git_url,\n+        auth_token=args.git_token\n+    )\n+    \n+    # Update file details or process failed files\n+    if args.failed_only:\n+        result = process_failed_files(file_memory)\n+        logger.info(f\"Processed {len(result)} previously failed files\")\n+    else:\n+        result = update_file_descriptions(file_memory)\n+        logger.info(f\"Updated descriptions for {len(result)} files\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "scripts/init_file_memory.sh",
    "content": "diff\n--- /dev/null\n+++ scripts/init_file_memory.sh\n@@ -0,0 +1,26 @@\n+#!/bin/bash\n+\n+# Script to initialize file memory using GitManager (without LogManager)\n+\n+show_help() {\n+    echo \"Usage: $0 [options]\"\n+    echo \"\"\n+    echo \"Options:\"\n+    echo \"  -d, --directory DIR    Set project directory (default: current directory)\"\n+    echo \"  -m, --model MODEL      Set AI model (default: gpt-4o)\"\n+    echo \"  -t, --temp VALUE       Set temperature (default: 0.7)\"\n+    echo \"  -f, --failed-only      Process only previously failed files\"\n+    echo \"  -h, --help             Show this help message\"\n+    echo \"\"\n+}\n+\n+if [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n+    show_help\n+    exit 0\n+fi\n+\n+# Pass all arguments to the Python module\n+python -m client.file_memory_client \"$@\"\n+\n+# Exit with the same status code as the Python command\n+exit $?\n\n\ndiff\n--- scripts/init_file_memory.sh\n+++ scripts/init_file_memory.sh\n@@ -0,0 +1,27 @@\n+#!/bin/bash\n+\n+# Script to initialize file memory using GitManager (without LogManager)\n+# This script helps to run the bella-file-memory command with common options\n+\n+show_help() {\n+    echo \"Usage: $0 [options]\"\n+    echo \"\"\n+    echo \"Options:\"\n+    echo \"  -d, --directory DIR    Set project directory (default: current directory)\"\n+    echo \"  -m, --model MODEL      Set AI model (default: gpt-4o)\"\n+    echo \"  -t, --temp VALUE       Set temperature (default: 0.7)\"\n+    echo \"  -f, --failed-only      Process only previously failed files\"\n+    echo \"  -h, --help             Show this help message\"\n+    echo \"\"\n+}\n+\n+if [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n+    show_help\n+    exit 0\n+fi\n+\n+# Pass all arguments to the Python module\n+python -m client.file_memory_client \"$@\"\n+\n+# Exit with the same status code as the Python command\n+exit $?\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/__init__.py",
    "content": "diff\n--- client/__init__.py\n+++ client/__init__.py\n@@ -1 +1,4 @@\n \"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n+\n+# Export file memory functions for programmatic use\n+from client.file_memory_client import initialize_file_memory, update_file_descriptions, process_failed_files\n\n",
    "file_content": "\"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n# Add exports for the new file memory client modules\nfrom client.file_memory_api import init_file_memory, update_file_descriptions, process_failed_files\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]