[
  {
    "file_name": "client/file_memory_client.py",
    "content": "diff\n--- /dev/null\n+++ client/file_memory_client.py\n@@ -0,0 +1,112 @@\n+\"\"\"\n+File Memory Client\n+\n+A standalone client for initializing and managing FileMemory without LogManager.\n+Uses GitManager to track file changes and update file descriptions.\n+\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from pathlib import Path\n+from typing import Optional\n+\n+from dotenv import load_dotenv\n+\n+from core.ai import AIConfig\n+from core.file_memory import FileMemory, FileMemoryConfig\n+from core.git_manager import GitManager, GitConfig\n+from core.log_config import setup_logging, get_logger\n+\n+logger = get_logger(__name__)\n+\n+\n+def initialize_file_memory(\n+    project_dir: str,\n+    model_name: str = \"gpt-4o\",\n+    temperature: float = 0.7,\n+    api_key: Optional[str] = None,\n+    base_url: Optional[str] = None,\n+    remote_url: Optional[str] = None,\n+    auth_token: Optional[str] = None,\n+) -> FileMemory:\n+    \"\"\"\n+    Initialize FileMemory using GitManager without LogManager.\n+    \n+    Args:\n+        project_dir: Path to the project directory\n+        model_name: AI model to use for generating file descriptions\n+        temperature: Temperature setting for AI responses\n+        api_key: API key for AI service (will use env var if None)\n+        base_url: Base URL for AI service (will use default if None)\n+        remote_url: Git remote URL (will use env var if None)\n+        auth_token: Git authentication token (will use env var if None)\n+        \n+    Returns:\n+        Initialized FileMemory instance\n+    \"\"\"\n+    # Create AI config\n+    ai_config = AIConfig(\n+        model_name=model_name,\n+        temperature=temperature,\n+        api_key=api_key,\n+        base_url=base_url\n+    )\n+    \n+    # Create Git config\n+    git_config = GitConfig(\n+        repo_path=project_dir,\n+        remote_url=remote_url or os.getenv(\"GIT_REMOTE\"),\n+        auth_token=auth_token or os.getenv(\"GITHUB_TOKEN\")\n+    )\n+    \n+    # Initialize Git manager\n+    git_manager = GitManager(config=git_config)\n+    \n+    # Initialize and return FileMemory\n+    file_memory_config = FileMemoryConfig(\n+        project_dir=project_dir,\n+        git_manager=git_manager,\n+        ai_config=ai_config,\n+        log_manager=None  # Explicitly set to None as per requirements\n+    )\n+    \n+    return FileMemory(config=file_memory_config)\n+\n+\n+def main():\n+    \"\"\"Command line interface for FileMemory client.\"\"\"\n+    # Load environment variables\n+    load_dotenv()\n+    \n+    # Parse command line arguments\n+    parser = argparse.ArgumentParser(description=\"FileMemory Client - Update file descriptions for a project\")\n+    parser.add_argument(\"-d\", \"--directory\", default=\".\", help=\"Project directory path (default: current directory)\")\n+    parser.add_argument(\"-m\", \"--model\", default=\"gpt-4o\", help=\"AI model name (default: gpt-4o)\")\n+    parser.add_argument(\"-t\", \"--temperature\", type=float, default=0.7, help=\"AI temperature (default: 0.7)\")\n+    parser.add_argument(\"-l\", \"--log-level\", choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"], default=\"INFO\", help=\"Logging level\")\n+    parser.add_argument(\"--failed-only\", action=\"store_true\", help=\"Process only previously failed files\")\n+    args = parser.parse_args()\n+    \n+    # Setup logging\n+    setup_logging(log_level=getattr(logging, args.log_level))\n+    \n+    # Get absolute path for project directory\n+    project_dir = os.path.abspath(args.directory)\n+    if not os.path.isdir(project_dir):\n+        logger.error(f\"Project directory does not exist: {project_dir}\")\n+        sys.exit(1)\n+    \n+    logger.info(f\"Initializing FileMemory for project: {project_dir}\")\n+    \n+    # Initialize FileMemory\n+    file_memory = initialize_file_memory(\n+        project_dir=project_dir,\n+        model_name=args.model,\n+        temperature=args.temperature\n+    )\n+    \n+    # Update file details or process failed files\n+    if args.failed_only:\n+        file_memory.process_failed_files()\n+    else:\n+        file_memory.update_file_details()\n+\n+\n+if __name__ == \"__main__\":\n+    import logging\n+    main()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/file_memory_api.py",
    "content": "diff\n--- /dev/null\n+++ client/file_memory_api.py\n@@ -0,0 +1,91 @@\n+\"\"\"\n+File Memory API\n+\n+Provides programmable API functions for using FileMemory without LogManager.\n+\"\"\"\n+\n+import os\n+from typing import Dict, List, Optional\n+\n+from dotenv import load_dotenv\n+\n+from core.ai import AIConfig\n+from core.file_memory import FileMemory, FileMemoryConfig\n+from core.git_manager import GitManager, GitConfig\n+\n+\n+def init_file_memory(\n+    project_dir: str,\n+    model_name: str = \"gpt-4o\",\n+    temperature: float = 0.7,\n+    api_key: Optional[str] = None,\n+    base_url: Optional[str] = None,\n+    remote_url: Optional[str] = None,\n+    auth_token: Optional[str] = None,\n+) -> FileMemory:\n+    \"\"\"\n+    Initialize a FileMemory instance with GitManager (no LogManager).\n+    \n+    Args:\n+        project_dir: Path to the project directory\n+        model_name: AI model to use for generating file descriptions\n+        temperature: Temperature setting for AI responses\n+        api_key: API key for AI service (will use env var if None)\n+        base_url: Base URL for AI service (will use default if None)\n+        remote_url: Git remote URL (will use env var if None)\n+        auth_token: Git authentication token (will use env var if None)\n+        \n+    Returns:\n+        Initialized FileMemory instance\n+    \"\"\"\n+    # Load environment variables if not already loaded\n+    load_dotenv()\n+    \n+    # Create AI config\n+    ai_config = AIConfig(\n+        model_name=model_name,\n+        temperature=temperature,\n+        api_key=api_key,\n+        base_url=base_url\n+    )\n+    \n+    # Create Git config\n+    git_config = GitConfig(\n+        repo_path=project_dir,\n+        remote_url=remote_url or os.getenv(\"GIT_REMOTE\"),\n+        auth_token=auth_token or os.getenv(\"GITHUB_TOKEN\")\n+    )\n+    \n+    # Initialize Git manager\n+    git_manager = GitManager(config=git_config)\n+    \n+    # Initialize and return FileMemory\n+    file_memory_config = FileMemoryConfig(\n+        project_dir=project_dir,\n+        git_manager=git_manager,\n+        ai_config=ai_config,\n+        log_manager=None  # Explicitly None as per requirements\n+    )\n+    \n+    return FileMemory(config=file_memory_config)\n+\n+\n+def update_file_descriptions(file_memory: FileMemory) -> None:\n+    \"\"\"\n+    Update file descriptions using the given FileMemory instance.\n+    \n+    Args:\n+        file_memory: Initialized FileMemory instance\n+    \"\"\"\n+    file_memory.update_file_details()\n+\n+\n+def process_failed_files(file_memory: FileMemory) -> Dict[str, str]:\n+    \"\"\"\n+    Process previously failed files to generate their descriptions.\n+    \n+    Args:\n+        file_memory: Initialized FileMemory instance\n+        \n+    Returns:\n+        Dictionary mapping file paths to their descriptions\n+    \"\"\"\n+    return file_memory.process_failed_files()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "examples/example_file_memory_client.py",
    "content": "diff\n--- /dev/null\n+++ examples/example_file_memory_client.py\n@@ -0,0 +1,44 @@\n+\"\"\"\n+Example demonstrating how to use the FileMemory client without LogManager.\n+\n+This example shows how to:\n+1. Initialize FileMemory with only GitManager\n+2. Update file descriptions\n+3. Process previously failed files\n+\"\"\"\n+\n+import os\n+import logging\n+from pathlib import Path\n+\n+from dotenv import load_dotenv\n+\n+from client.file_memory_api import init_file_memory, update_file_descriptions, process_failed_files\n+from core.log_config import setup_logging\n+\n+\n+def main():\n+    # Setup logging\n+    setup_logging(log_level=logging.INFO)\n+    \n+    # Load environment variables\n+    load_dotenv()\n+    \n+    # Set project directory (this example uses the parent directory of this file)\n+    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n+    \n+    print(f\"Initializing FileMemory for project: {project_dir}\")\n+    \n+    # Initialize FileMemory using only GitManager (no LogManager)\n+    file_memory = init_file_memory(\n+        project_dir=project_dir,\n+        model_name=\"gpt-4o\",\n+        temperature=0.7\n+    )\n+    \n+    # Update file descriptions\n+    print(\"Updating file descriptions...\")\n+    update_file_descriptions(file_memory)\n+    \n+\n+if __name__ == \"__main__\":\n+    main()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "requirements.txt",
    "content": "diff\n--- /dev/null\n+++ requirements.txt\n@@ -0,0 +1,7 @@\n+python-dotenv>=1.0.0\n+langchain>=0.1.0\n+gitpython>=3.1.30\n+openai>=1.3.0\n+PyGithub>=2.0.0\n+dataclasses-json>=0.5.7\n+typing-extensions>=4.7.0\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "client/__init__.py",
    "content": "diff\n--- client/__init__.py\n+++ client/__init__.py\n@@ -1 +1,3 @@\n \"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"\n+# Add exports for the new file memory client modules\n+from client.file_memory_api import init_file_memory, update_file_descriptions, process_failed_files\n\n",
    "file_content": "\"\"\"Client package for running the WorkflowEngine from the terminal.\"\"\"",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]