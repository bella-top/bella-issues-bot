# Core 目录文件功能与关系解析

`core` 目录是项目的核心部分，包含了整个系统的基础功能实现。以下是各个文件的主要功能和它们之间的关系：

## 主要文件功能

### 1. `__init__.py`
- 功能：标识该目录为Python包，并暴露核心模块接口
- 作用：使其他模块能够通过 `from core import ...` 方式导入核心功能

### 2. `constants.py`
- 功能：定义系统中使用的常量值
- 包含：环境变量名称、默认配置值、特殊字符串等固定值
- 作用：集中管理常量，避免硬编码，便于统一修改

### 3. `llm.py`
- 功能：大语言模型(LLM)接口封装
- 主要内容：定义LLM接口类、模型调用方法、参数处理等
- 作用：为系统提供统一的AI模型调用能力

### 4. `prompt_template.py`
- 功能：提示词模板管理和处理
- 主要内容：提示词模板定义、变量替换、模板加载等
- 作用：构建与LLM交互的提示词，控制AI输出行为

### 5. `workspace_agent.py`
- 功能：工作区代理实现
- 主要内容：工作区操作、文件管理、代码执行等
- 作用：处理项目工作空间相关的操作，提供代码执行环境

### 6. `config_loader.py`
- 功能：配置加载和管理
- 主要内容：读取配置文件、处理环境变量、提供默认配置等
- 作用：统一管理系统配置，提供配置获取接口

### 7. `tool_executor.py`
- 功能：执行各种工具函数
- 主要内容：工具注册、工具调用、结果处理等
- 作用：提供扩展功能执行机制，支持自定义工具

## 文件之间的关系

1. **核心依赖关系**：
   - `llm.py` 依赖 `config_loader.py` 获取模型配置
   - `prompt_template.py` 为 `llm.py` 提供交互提示词
   - `workspace_agent.py` 调用 `tool_executor.py` 执行特定工具任务
   - 所有模块共享使用 `constants.py` 中的常量

2. **数据流**：
   - 配置信息 → `config_loader.py` → 其他模块
   - 用户输入 → `prompt_template.py`(构建提示词) → `llm.py`(调用模型) → 返回结果
   - 工具操作请求 → `tool_executor.py` → 执行具体工具 → 返回结果

3. **功能划分**：
   - `config_loader.py` 和 `constants.py` 负责系统基础设置
   - `llm.py` 和 `prompt_template.py` 负责AI交互层
   - `workspace_agent.py` 和 `tool_executor.py` 负责功能执行层

这些文件共同构成了项目的核心功能框架，通过清晰的职责划分和良好的协作关系，支持整个系统的运行。