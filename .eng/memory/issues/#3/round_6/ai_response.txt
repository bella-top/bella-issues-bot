# 改动介绍：整合工作流引擎实现

我为项目实现了一个集成的工作流引擎系统，该系统能够根据用户需求自动决定是执行代码修改还是聊天回复流程。主要改动包括：

## 1. 核心决策环境模块 (core/decision_environment.py)

创建了一个决策系统，用于分析用户输入的需求类型：
- `DecisionEnvironment` 类：使用 AI 模型分析用户需求是否需要修改代码
- `DecisionResult` 数据类：存储决策结果（是否需要修改代码及原因）
- 内置智能判断逻辑：首轮默认执行代码修改，后续轮次根据上下文智能判断

## 2. 工作流引擎 (core/workflow_engine.py)

将之前分散在各个示例中的代码和聊天流程整合到单一工作流引擎中：
- `WorkflowEngine` 类：协调版本管理、日志管理和 AI 交互
- `_run_code_generation_workflow` 方法：处理代码修改需求
- `_run_chat_workflow` 方法：处理对话类需求
- 集成了 `DecisionEnvironment` 来自动选择适当的流程

## 3. Git 管理扩展 (core/git_manager.py)

为 `GitManager` 添加了新功能：
- `checkout_issue_branch` 方法：拉取指定 issue 对应的最新分支并检出
- 如果 issue 没有关联分支，则回退到默认分支
- 支持按轮次排序，自动选择最新的 issue 分支

## 4. 聊天处理器 (core/chat_processor.py)

改进了聊天处理逻辑：
- 优化了 `ChatProcessor` 类以更好地处理用户查询
- 增强了上下文管理，可选择性使用版本历史
- 改进了提示词构建，确保回答质量

## 5. 示例文件

创建了新的示例展示如何使用集成工作流：
- `example_workflow.py`：展示如何使用 `WorkflowEngine` 处理用户需求
- 更新了现有示例以适应新的架构

## 总结

这些改动实现了一个统一的工作流系统，可以：
1. 自动分析用户需求类型
2. 根据需求类型选择适当的处理流程
3. 在代码生成和聊天回复之间无缝切换
4. 保持版本管理和历史记录一致性

这种集成方法大大简化了项目结构，使开发人员能够通过单一入口点处理不同类型的用户需求，同时保持各个组件之间的解耦和专一性。