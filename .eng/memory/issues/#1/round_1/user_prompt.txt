# 项目文件描述


- core/memory/log_manager.py: 管理代码生成的日志存档和检索。关键类是LogManager，负责将生成的日志保存到特定目录并检索。与文件选择、代码生成和Git管理模块交互。


# 文件内容



```
File: core/memory/log_manager.py
1 import glob
2 import logging
3 import os
4 import datetime
5 from dataclasses import dataclass, field
6 from typing import List, Optional
7 
8 logger = logging.getLogger(__name__)
9 
10 
11 @dataclass
12 class LogConfig:
13     """日志管理配置"""
14 
15     project_dir: str
16     logs_dir: str = "memory/logs"
17     issues_dir: str = "memory/issues"
18     base_dir: str = ".eng"
19 
20 
21 @dataclass
22 class LogEntry:
23     """存储单次代码生成日志的数据类"""
24     issue_id: int
25     round_num: int
26     sys_prompt: str
27     prompt: str
28     response: str
29     timestamp: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
30     log_path: str = ""
31 
32 
33 class LogManager:
34     """管理代码生成日志的存档和检索"""
35 
36     def __init__(self, config: LogConfig):
37         """
38         初始化日志管理器
39 
40         Args:
41             config: LogConfig实例，包含必要的配置信息
42         """
43         self.config = config
44         self.logs_path = os.path.join(
45             self.config.project_dir, self.config.base_dir, self.config.logs_dir
46         )
47         self.issues_path = os.path.join(
48             self.config.project_dir, self.config.base_dir, self.config.issues_dir
49         )
50 
51         # 确保必要的目录存在
52         os.makedirs(self.logs_path, exist_ok=True)
53         os.makedirs(self.issues_path, exist_ok=True)
54 
55         # 定义日志文件名常量
56         self.SYS_PROMPT_FILE = "system_prompt.txt"
57         self.USER_PROMPT_FILE = "user_prompt.txt"
58         self.AI_RESPONSE_FILE = "ai_response.txt"
59 
60     def archive_logs(self, issue_id: int, sys_prompt: str, prompt: str, response: str) -> str:
61         """
62         将代码生成日志存档到指定的目录
63 
64         Args:
65             issue_id: GitHub issue的ID
66             sys_prompt: 系统提示词
67             prompt: 用户提示词
68             response: AI响应
69 
70         Returns:
71             str: 存档目录的路径
72         """
73         # 获取下一个轮次号
74         round_num = self._get_next_round(issue_id)
75         
76         # 创建issue目录
77         issue_dir = os.path.join(self.issues_path, f"#{issue_id}")
78         os.makedirs(issue_dir, exist_ok=True)
79         
80         # 创建轮次目录
81         round_dir = os.path.join(issue_dir, f"round_{round_num}")
82         os.makedirs(round_dir, exist_ok=True)
83         
84         # 保存系统提示词
85         with open(os.path.join(round_dir, self.SYS_PROMPT_FILE), "w", encoding="utf-8") as f:
86             f.write(sys_prompt)
87         
88         # 保存用户提示词
89         with open(os.path.join(round_dir, self.USER_PROMPT_FILE), "w", encoding="utf-8") as f:
90             f.write(prompt)
91         
92         # 保存AI响应
93         with open(os.path.join(round_dir, self.AI_RESPONSE_FILE), "w", encoding="utf-8") as f:
94             f.write(response)
95         
96         # 记录日志
97         logger.info(f"已将日志存档至: {round_dir}")
98         
99         # 返回存档目录的路径
100         return round_dir
101 
102     def _get_next_round(self, issue_id: int) -> int:
103         """
104         获取下一个轮次号
105 
106         Args:
107             issue_id: GitHub issue的ID
108 
109         Returns:
110             int: 下一个轮次号
111         """
112         issue_path = os.path.join(self.issues_path, "#" + str(issue_id))
113         if not os.path.exists(issue_path):
114             return 1
115 
116         existing_rounds = [
117             int(d[6:])
118             for d in os.listdir(issue_path)
119             if os.path.isdir(os.path.join(issue_path, d)) and (d[6:]).isdigit()
120         ]
121 
122         return max(existing_rounds, default=0) + 1
123 
124     def _get_log_files(self) -> List[str]:
125         """
126         获取所有日志文件的路径
127 
128         Returns:
129             List[str]: 日志文件路径列表
130         """
131         log_patterns = ["*.log", "*.txt"]
132 
133         log_files = []
134         for pattern in log_patterns:
135             log_files.extend(glob.glob(os.path.join(self.logs_path, pattern)))
136 
137         return log_files
138         
139     def get_issue_log_entries(self, issue_id: int) -> List[LogEntry]:
140         """
141         获取指定issue的所有轮次的日志条目
142 
143         Args:
144             issue_id: GitHub issue的ID
145 
146         Returns:
147             List[LogEntry]: 日志条目列表，按轮次排序
148         """
149         issue_dir = os.path.join(self.issues_path, f"#{issue_id}")
150         if not os.path.exists(issue_dir):
151             logger.warning(f"Issue #{issue_id}的日志目录不存在")
152             return []
153         
154         log_entries = []
155         
156         # 遍历所有轮次目录
157         for dir_name in os.listdir(issue_dir):
158             if not dir_name.startswith("round_"):
159                 continue
160                 
161             try:
162                 round_num = int(dir_name[6:])  # 提取轮次号
163                 round_dir = os.path.join(issue_dir, dir_name)
164                 
165                 # 读取系统提示词
166                 sys_prompt_path = os.path.join(round_dir, self.SYS_PROMPT_FILE)
167                 with open(sys_prompt_path, "r", encoding="utf-8") as f:
168                     sys_prompt = f.read()
169                 
170                 # 读取用户提示词
171                 user_prompt_path = os.path.join(round_dir, self.USER_PROMPT_FILE)
172                 with open(user_prompt_path, "r", encoding="utf-8") as f:
173                     prompt = f.read()
174                 
175                 # 读取AI响应
176                 ai_response_path = os.path.join(round_dir, self.AI_RESPONSE_FILE)
177                 with open(ai_response_path, "r", encoding="utf-8") as f:
178                     response = f.read()
179                 
180                 # 创建并添加LogEntry对象
181                 entry = LogEntry(issue_id=issue_id, round_num=round_num, 
182                                  sys_prompt=sys_prompt, prompt=prompt, 
183                                  response=response, log_path=round_dir)
184                 log_entries.append(entry)
185             except Exception as e:
186                 logger.error(f"读取轮次 {dir_name} 的日志失败: {str(e)}")
187         
188         # 按轮次号排序
189         return sorted(log_entries, key=lambda entry: entry.round_num)
190 
191 
192 if __name__ == "__main__":
193     config = LogConfig("../..")
194     log_manager = LogManager(config)
195
```




# 用户需求


    log_manager.py的 archive_logs方法和get_issue_log_entries方法，不一致，archive_logs方法没保存时间，需要保存。
    再实现一个获取指定轮次的log信息的方法。

    