# 项目文件描述


- core/workflow_engine.py: 工作流引擎，协调版本管理、日志管理和AI交互。包含WorkflowEngine类和WorkflowEngineConfig数据类，根据决策结果选择代码生成或聊天流程，整合了项目的各个组件。

- examples/example_workflow.py: 示例代码，展示如何使用WorkflowEngine处理用户需求的工作流程。通过创建WorkflowEngineConfig配置对象并初始化WorkflowEngine实例，演示了如何自动处理用户提交的需求文本。

- pyproject.toml: 项目依赖配置文件，定义了项目元数据和依赖包信息。包含项目名称、版本、描述、作者以及所有Python依赖包及其版本要求，同时配置了代码格式化工具。


# 文件内容



```
File: core/workflow_engine.py
1 import os
2 from dataclasses import dataclass
3 from typing import Optional, Tuple
4 
5 from core.ai import AIConfig
6 from core.chat_processor import ChatProcessor, ChatProcessorConfig
7 from core.code_engineer import CodeEngineer, CodeEngineerConfig
8 from core.decision_environment import DecisionEnvironment, DecisionResult
9 from core.diff import Diff
10 from core.file_memory import FileMemory, FileMemoryConfig
11 from core.file_selector import FileSelector
12 from core.git_manager import GitManager, GitConfig, get_issues_branch_name
13 from core.log_manager import LogManager, LogConfig
14 from core.prompt_generator import PromptGenerator, PromptData
15 from core.version_manager import VersionManager
16 from log_config import get_logger
17 
18 logger = get_logger(__name__)
19 
20 @dataclass
21 class WorkflowEngineConfig:
22     project_dir: str
23     issue_id:int
24     core_model:str = "gpt-4o"
25     data_model:str = "gpt-4o"
26     core_template: float = 0.7
27     data_template: float = 0.7
28     max_retry: int = 3,
29     default_branch: str = "main"
30     mode: str = "client" # ["client", "bot"] bot模式下，每次进行工作时，会hard reset到issues的最新分支上
31     base_url: Optional[str] = None
32     api_key: Optional[str] = None
33     github_remote_url: Optional[str] =None
34     github_token: Optional[str] = None
35 
36 
37 class WorkflowEngine:
38     CODE_TIMES = 0
39     CHAT_TIMES = 0
40     """
41     工作流引擎，协调版本管理、日志管理和AI交互
42     """
43     def __init__(self, config: WorkflowEngineConfig):
44         """
45         初始化工作流引擎
46         
47         Args:
48             config: 工作流配置
49         """
50         self.CODE_TIMES = 0
51         self.CHAT_TIMES = 0
52         self.config = config
53 
54         self.project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../."))
55         
56         # 创建AI配置
57         self.core_ai_config = AIConfig(
58             model_name=config.core_model,
59             temperature=config.core_template,
60             base_url=config.base_url,
61             api_key=config.api_key
62         )
63         
64         self.data_ai_config = AIConfig(
65             model_name=config.data_model,
66             temperature=config.data_template,
67             base_url=config.base_url,
68             api_key=config.api_key
69         )
70         
71         # 创建Git配置
72         self.git_config = GitConfig(
73             repo_path=self.project_dir,
74             remote_url=config.github_remote_url,
75             auth_token=config.github_token,
76             default_branch=config.default_branch
77         )
78         
79         # 创建日志配置
80         self.log_config = LogConfig(
81             project_dir=self.project_dir,
82             issue_id=config.issue_id
83         )
84         
85         # 初始化管理器
86         self.log_manager = LogManager(config=self.log_config)
87         self.git_manager = GitManager(config=self.git_config)
88         self.version_manager = VersionManager(
89             issue_id=config.issue_id,
90             ai_config=self.core_ai_config,
91             log_manager=self.log_manager,
92             git_manager=self.git_manager
93         )
94         self.file_selector = FileSelector(
95             self.project_dir,
96             self.config.issue_id,
97             ai_config=self.core_ai_config
98         )
99         self.file_memory = FileMemory(
100             config=FileMemoryConfig(
101                 git_manager=self.git_manager,
102                 ai_config=self.core_ai_config,
103                 project_dir=self.project_dir
104             )
105         )
106         
107         # 初始化代码工程师
108         self.code_engineer_config = CodeEngineerConfig(
109             project_dir=self.project_dir,
110             ai_config=self.core_ai_config
111         )
112         self.engineer = CodeEngineer(
113             self.code_engineer_config,
114             self.log_manager,
115             Diff(self.data_ai_config)
116         )
117         
118         # 初始化聊天处理器
119         self.chat_processor = ChatProcessor(
120             ai_config=self.core_ai_config,
121             log_manager=self.log_manager,
122             config=ChatProcessorConfig(system_prompt="你是一个项目助手，负责回答关于代码库的问题。下面会给出用户的问题以及相关的项目文件信息。")
123         )
124         
125         # 初始化决策环境
126         self.decision_env = DecisionEnvironment(
127             ai_config=self.core_ai_config,
128             version_manager=self.version_manager
129         )
130     
131     def process_requirement(self, user_requirement: str):
132         """
133         处理用户需求
134         
135         Args:
136             user_requirement: 用户需求
137 
138         """
139         # 重置到工作区
140         if self.config.mode == "bot":
141             self.git_manager.reset_to_issue_branch(self.config.issue_id)
142         # 先通过决策环境分析需求类型
143         decision_result = self.decision_env.analyze_requirement(user_requirement)
144         
145         logger.info(f"决策结果: 是否需要修改代码={decision_result.needs_code_modification}, "
146                     f"理由={decision_result.reasoning}")
147         
148         if decision_result.needs_code_modification:
149             # 执行代码修改流程
150             response = self._run_code_generation_workflow(user_requirement)
151         else:
152             # 执行对话流程
153             response = self._run_chat_workflow(user_requirement)
154         if self.config.mode == "bot" and self.config.github_remote_url and response:
155             self.git_manager.add_issue_comment(issue_number=self.config.issue_id, comment_text=response)
156     
157     def _run_code_generation_workflow(self, user_requirement: str) -> Optional[str]:
158         """
159         执行代码生成流程，基于example_code_generate.py的逻辑
160         
161         Args:
162             user_requirement: 用户需求
163             
164         Returns:
165             str: 处理结果
166         """
167         logger.info("开始执行代码生成流程")
168 
169         # 确定当前版本
170         requirement, history = self.version_manager.ensure_version_and_generate_context(user_requirement)
171 
172         # 初始化工作区
173         branch_name = self._init_env()
174 
175         # 生成提示词
176         user_prompt = self._get_user_prompt(requirement, history)
177 
178         # 根据提示词修改代码
179         success, response = self.engineer.process_prompt(prompt=user_prompt)
180         
181         # 提交更改
182         if success:
183             self.git_manager.commit(f"issues#{self.config.issue_id}-generate by Bella-Issues-Bot")
184             self.git_manager.push(branch=branch_name, force=True)
185             return response
186         else:
187             if ++self.CODE_TIMES >= self.config.max_retry:
188                 logger.error("code workflow超过最大重试次数")
189                 return self._run_chat_workflow(user_requirement)
190             else:
191                 return self._run_code_generation_workflow(user_requirement)
192     
193     def _run_chat_workflow(self, user_requirement: str) -> Optional[str]:
194         """
195         执行聊天流程，基于example_chat_process.py的逻辑
196         
197         Args:
198             user_requirement: 用户需求
199             
200         Returns:
201             str: 处理结果
202         """
203         logger.info("开始执行聊天回复流程")
204 
205 
206         history = self.version_manager.get_formatted_history()
207         # 初始化工作区
208         branch_name = self._init_env()
209 
210         # 生成提示词
211         user_prompt = self._get_user_prompt(user_requirement, history)
212         
213         # 处理聊天请求
214         response = self.chat_processor.process_chat(user_prompt)
215 
216         if(response):
217             self.git_manager.commit(f"issues#{self.config.issue_id}-generate by Bella-Issues-Bot")
218             self.git_manager.push(branch=branch_name, force=True)
219             return response
220         else:
221             if ++self.CHAT_TIMES >= self.config.max_retry:
222                 logger.error("chat workflow超过最大重试次数")
223                 return None
224             else:
225                 return self._run_chat_workflow(user_requirement)
226 
227     def _get_user_prompt(self, requirement: str, history: str) -> str:
228         # 选择文件
229         files = self.file_selector.select_files_for_requirement(requirement)
230         descriptions = FileMemory.get_selected_file_descriptions(self.project_dir, files)
231 
232         # 准备提示词数据
233         data = PromptData(
234             requirement=requirement,
235             project_dir=self.project_dir,
236             steps=history,
237             files=files,
238             file_desc=descriptions
239         )
240 
241         # 生成提示词
242         return PromptGenerator.generatePrompt(data)
243 
244     def _init_env(self) -> str:
245         # 获取当前轮次
246         current_round = self.log_manager.get_current_round()
247 
248         # 获取分支名称
249         branch_name = get_issues_branch_name(self.config.issue_id, current_round)
250 
251         # 如果轮次大于1，增量更新上一轮修改的文件详细信息
252         if current_round > 1:
253             self.file_memory.update_file_details()
254         # 切换到适当的分支
255         self.git_manager.switch_branch(branch_name, True)
256         return branch_name
257 
258
```




```
File: examples/example_workflow.py
1 """
2 这个示例展示如何使用WorkflowEngine处理用户需求，自动决策是代码生成还是对话流程
3 """
4 
5 import os
6 
7 from dotenv import load_dotenv
8 
9 from core.workflow_engine import WorkflowEngine, WorkflowEngineConfig
10 
11 def main():
12     # 加载环境变量
13     load_dotenv()
14     
15     # 创建工作目录
16     project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../."))
17     issue_id = 5
18     
19     # 创建工作流引擎配置
20     config = WorkflowEngineConfig(
21         project_dir=project_dir,
22         issue_id=issue_id,
23         core_model="coder-model",
24         data_model="gpt-4o",
25         core_template=1,
26         data_template=0.7
27     )
28     
29     # 初始化工作流引擎
30     workflow_engine = WorkflowEngine(config)
31 
32     requirement = """
33     创建一个 client包，提供终端启动方法，创建WorkflowEngine处理用户需求。WorkflowEngineConfig的参数都可以通过命令行传入。
34     使用方式，参照example_workflow.py
35     """
36     
37     # 处理代码修改需求
38     workflow_engine.process_requirement(requirement)
39 
40 if __name__ == "__main__":
41     main()
42
```




```
File: pyproject.toml
1 [tool.poetry]
2 name = "bella-issues-bot"
3 version = "0.1.0"
4 description = ""
5 authors = [""]
6 license = "MIT"
7 readme = "README.md"
8 homepage = ""
9 repository = ""
10 documentation = ""
11 classifiers = [
12   "Development Status :: 4 - Beta",
13   "Topic :: Scientific/Engineering :: Artificial Intelligence",
14 ]
15 
16 [build-system]
17 requires = ["poetry-core>=1.0.0"]
18 build-backend = "poetry.core.masonry.api"
19 
20 [tool.poetry.dependencies]
21 python = ">=3.10,<3.13"
22 gitpython = "^3.1.40"
23 PyGithub = "^2.1.1"
24 langchain = ">=0.3.0,<0.4.0"
25 langchain-openai = ">=0.1.0"
26 langchain-core = ">=0.3.0,<0.4.0"
27 langchain-community = ">=0.3.0,<0.4.0"
28 python-dotenv = "^1.0.0"
29 pydantic = "^2.5.0"
30 openai = "^1.3.5"
31 pytest = "^7.4.0"
32 pathspec = ">=0.9.0"
33 toml = ">=0.10.2"
34 typing-extensions = ">=4.0.0"
35 jinja2 = ">=3.1.0,<4.0.0"
36 colorlog = ">=6.8.0,<7.0.0"
37 
38 [tool.poetry.scripts]
39 bella-issuses-bot = ''
40 
41 [tool.ruff]
42 select = ["F", "E", "W", "I001"]
43 show-fixes = false
44 target-version = "py310"
45 task-tags = ["TODO", "FIXME"]
46 extend-ignore = ["E501", "E722"]
47 
48 [tool.black]
49 target-version = ["py310"]
50 
51 [tool.ruff.isort]
52 known-first-party = []
53 known-third-party = []
54 section-order = [
55   "future",
56   "standard-library",
57   "third-party",
58   "first-party",
59   "local-folder",
60 ]
61 combine-as-imports = true
62 split-on-trailing-comma = false
63 lines-between-types = 1
```




# 历史执行信息

=========================以上【历史执行记录】内容为历史执行过程，所有代码改动均已经生效========================================
=========================经过分析后续的历史执行过程不符合用户需求，已经回滚，不在此展示============================


# 用户需求


    创建一个 client包，提供终端启动方法，创建WorkflowEngine处理用户需求。WorkflowEngineConfig的参数都可以通过命令行传入。
    使用方式，参照example_workflow.py
    