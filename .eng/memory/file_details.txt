README.md:项目主文档，介绍bella-issues-bot工具的功能、特性、安装方法和使用场景。该工具支持个人开发助手和GitHub自动化两种工作模式，可通过命令行或编程API使用。
client/README.md:WorkflowEngine客户端文档，详细介绍了两种工作模式（个人开发助手和GitHub自动化）、命令行参数、使用方法以及编程API，支持通过CLI或Python接口调用核心功能。
client/__init__.py:客户端包的初始化文件，标识client包用于从终端运行WorkflowEngine。内容简单，仅包含一行包描述文档。
client/cli.py:命令行接口模块，提供解析命令行参数的功能，包含parse_args()、get_requirement_text()和build_config_from_args()函数，用于配置和运行WorkflowEngine。
client/runner.py:提供工作流引擎的编程API接口，方便在Python脚本中调用。主要包含run_workflow函数，接收多个参数如issue_id、requirement等，创建WorkflowEngineConfig并运行工作流引擎。为程序化使用提供简化接口。
client/terminal.py:WorkflowEngine的终端入口点，提供run_workflow_from_terminal()函数，负责从命令行解析参数并运行工作流引擎，支持环境变量配置。
core/ai.py:AI助手核心类，负责与AI模型交互，支持工具调用。包含AIConfig配置类和AIAssistant实现类，提供初始化模型、创建代理、生成响应等功能。
core/chat_processor.py:聊天处理模块，处理非代码修改类的用户交互。包含ChatProcessor类和ChatProcessorConfig数据类，负责回答用户问题并记录聊天互动日志。
core/code_engineer.py:代码工程师模块，处理用户prompt并与AI交互生成代码，包含CodeEngineer类，负责处理用户提示、解析diff并修改文件，支持处理失败文件的重试。
core/decision.py:决策环境模块，分析用户需求类型并确定处理流程，包含DecisionProcess类和DecisionResult数据类，提供需求分析工具判断是否需要修改代码。
core/diff.py:处理文件差异的工具类，用于解析和应用代码修改。提供解析文本中的diff信息、提取代码块、处理文件更改等功能，使用AI模型根据diff生成新文件内容。
core/file_fetcher.py:文件获取工具，提供FileFetcher类用于获取项目中的所有文件，支持.gitignore模式过滤，为代码分析和处理提供文件集合。
core/file_memory.py:文件记忆管理模块，提供对项目文件的描述记忆功能，包含FileMemory类，能批量生成文件描述、更新文件详情和处理失败文件，与Git集成跟踪变更。
core/file_selector.py:使用AI辅助选择实现特定功能所需文件。FileSelector类提供select_files_for_requirement方法分析需求并选择相关文件，与FileFetcher和FileMemory交互获取文件信息。
core/git_manager.py:Git操作管理器，提供GitManager类处理仓库克隆、分支管理、提交、推送、回退等操作。支持版本回退和历史追踪，与VersionManager密切协作。
core/log_manager.py:日志管理器，记录和检索代码生成的历史日志。管理按轮次组织的系统提示、用户提示和AI回复，提供当前轮次和历史日志检索功能。
core/prompt_generator.py:提示词生成器，创建结构化提示并从提示中提取信息。使用模板生成包含文件描述、内容和需求的提示词，支持文件内容格式化。
core/version_manager.py:版本管理模块，处理代码生成的版本控制和回退功能，包含VersionManager类和VersionInfo数据类，提供历史日志提取、版本回退分析和执行功能。
core/workflow_engine.py:工作流引擎核心模块，协调版本管理、日志管理和AI交互，包含WorkflowEngine类，实现代码生成和聊天流程的自动切换和执行。
examples/README.md:代码工程框架示例目录说明文档，包含两个主要示例文件：example_generate.py和example_code_engineer.py，分别展示完整工作流和CodeEngineer类的使用方法。
examples/example_chat_process.py:聊天处理流程示例，展示如何使用ChatProcessor处理用户对话需求。与代码生成示例不同，不使用版本管理，主要演示如何回答用户关于项目的问题。
examples/example_code_generate.py:代码生成流程示例，展示如何使用CodeEngineer处理代码修改需求。演示了从需求分析到代码生成和提交的完整流程，包含main函数作为入口点。
examples/example_terminal.py:展示如何以编程方式运行工作流的示例文件。包含example_run函数，演示了如何使用client.runner中的run_workflow函数处理简单需求。同时提供了命令行运行的示例说明。
examples/example_workflow.py:示例代码，展示如何使用WorkflowEngine处理用户需求。通过配置工作流引擎并提供需求描述，演示了工具的基本使用流程。
examples/run_from_cli.py:展示如何使用client.runner API运行工作流的示例脚本，通过run_workflow函数传入issue_id、需求文本和模型参数执行处理。
log_config.py:日志配置模块，提供统一的日志记录功能。包含setup_logging和get_logger函数，支持彩色控制台输出和文件日志轮转，为整个项目提供日志服务。
pyproject.toml:项目配置文件，定义包名为bella-issues-bot及其依赖。包含Poetry构建信息、Python版本要求、依赖包列表。定义命令行入口点为client.terminal模块。还包括代码质量工具配置如ruff和black。
scripts/run_bot.sh:便捷启动脚本，简化了命令行参数输入。检查参数并调用Python客户端模块，支持从文件读取需求或交互式输入需求。
system.txt:AI系统提示词配置文件，指导AI如何编写代码，包含代码输出格式要求、diff语法规范和最佳实践指南，是AI代码生成的指导原则。
tests/test_git_manager.py:测试文件，用于验证GitManager类的各种功能。包含多个测试函数，测试内容涵盖分支创建、提交、推送、克隆、拉取、添加Issue评论等Git操作。测试使用环境变量配置与真实GitHub仓库交互。
